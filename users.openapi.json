{
  "openapi": "3.1.0",
  "info": {
    "title": "cc-api-users",
    "description": "CurrentClient Users API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/profile": {
      "get": {
        "tags": ["profiles"],
        "summary": "Read Userprofile",
        "description": "Get user profile record",
        "operationId": "read_userprofile_api_v1_profile_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfile" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["profiles"],
        "summary": "Update Userprofile",
        "description": "Update user profile record",
        "operationId": "update_userprofile_api_v1_profile_put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdate-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/milestones": {
      "put": {
        "tags": ["profiles"],
        "summary": "Update Userprofile Milestones",
        "description": "Update user profile milestones record",
        "operationId": "update_userprofile_milestones_api_v1_profile_milestones_put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateMilestones" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileMilestonesUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/number": {
      "get": {
        "tags": ["profiles"],
        "summary": "Get Userprofile Number",
        "description": "Get user profile number",
        "operationId": "get_userprofile_number_api_v1_profile_number_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfileNumber" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/legal": {
      "get": {
        "tags": ["profiles"],
        "summary": "Get Userprofile Legal",
        "description": "Get user profile legal",
        "operationId": "get_userprofile_legal_api_v1_profile_legal_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfileLegal" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["profiles"],
        "summary": "Update Userprofile Legal",
        "description": "Update user profile legal",
        "operationId": "update_userprofile_legal_api_v1_profile_legal_put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserProfileLegal" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfileLegal" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/legal/submit": {
      "post": {
        "tags": ["profiles"],
        "summary": "Submit Userprofile Legal",
        "description": "Submit user profile legal",
        "operationId": "submit_userprofile_legal_api_v1_profile_legal_submit_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfileLegal" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/legal/upload-privacy-policy": {
      "post": {
        "tags": ["profiles"],
        "summary": "Upload Privacy Policy",
        "description": "Upload privacy policy",
        "operationId": "upload_privacy_policy_api_v1_profile_legal_upload_privacy_policy_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_privacy_policy_api_v1_profile_legal_upload_privacy_policy_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Upload Privacy Policy Api V1 Profile Legal Upload Privacy Policy Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/subscription-features": {
      "get": {
        "tags": ["profiles"],
        "summary": "Get Userprofile Subscription Features",
        "description": "Get user profile subscription features record",
        "operationId": "get_userprofile_subscription_features_api_v1_profile_subscription_features_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveSubscriptionFeatures"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/register-number": {
      "post": {
        "tags": ["profiles"],
        "summary": "Register Number",
        "description": "Register number to user profile\n\nRegister the number with twilio and save to the user profile",
        "operationId": "register_number_api_v1_profile_register_number_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_register_number_api_v1_profile_register_number_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Register Number Api V1 Profile Register Number Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/register-new-number": {
      "post": {
        "tags": ["profiles"],
        "summary": "Register New Number",
        "description": "Register new number to user profile",
        "operationId": "register_new_number_api_v1_profile_register_new_number_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisteredNumberUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileRegisteredNumberUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profile/uploadbranding": {
      "post": {
        "tags": ["profiles"],
        "summary": "Upload Profile Branding Image",
        "description": "Update profile branding image",
        "operationId": "upload_profile_branding_image_api_v1_profile_uploadbranding_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_profile_branding_image_api_v1_profile_uploadbranding_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Profile Branding Image Api V1 Profile Uploadbranding Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompt/make-friendly": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Generate Friendly Text",
        "description": "Make text friendly\n\nUse open ai to friendly-ize the text",
        "operationId": "post_generate_friendly_text_api_v1_prompt_make_friendly_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Generate Friendly Text Api V1 Prompt Make Friendly Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/prompt/make-simple": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Generate Simple Text",
        "description": "Make text simple\n\nUse open ai to simple-ize the text",
        "operationId": "post_generate_simple_text_api_v1_prompt_make_simple_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Generate Simple Text Api V1 Prompt Make Simple Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/prompt/make-formal": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Generate Formal Text",
        "description": "Make text formal\n\nUse open ai to formal-ize the text",
        "operationId": "post_generate_formal_text_api_v1_prompt_make_formal_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Generate Formal Text Api V1 Prompt Make Formal Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/prompt/make-rephrase": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Generate Rephrase Text",
        "description": "Rephase text\n\nUse open ai to rephase-ize the text",
        "operationId": "post_generate_rephrase_text_api_v1_prompt_make_rephrase_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Generate Rephrase Text Api V1 Prompt Make Rephrase Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/prompt/make-grammer": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Generate Grammer Text",
        "description": "Rephase text\n\nUse open ai to rephase-ize the text",
        "operationId": "post_generate_grammer_text_api_v1_prompt_make_grammer_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Generate Grammer Text Api V1 Prompt Make Grammer Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/prompt/make-summary": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Generate Summary Text",
        "description": "Rephase text\n\nUse open ai to rephase-ize the text",
        "operationId": "post_generate_summary_text_api_v1_prompt_make_summary_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Generate Summary Text Api V1 Prompt Make Summary Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/prompt/parse-contact-details": {
      "post": {
        "tags": ["prompt"],
        "summary": "Post Parse Contact Details",
        "description": "Parse contact details from text message conversation\n\nReturn json with first, last, email if available",
        "operationId": "post_parse_contact_details_api_v1_prompt_parse_contact_details_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Prompt" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptContactDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/": {
      "get": {
        "tags": ["organizations"],
        "summary": "Read Organization",
        "description": "Get organization record\n\nAdmin and Governor can read organization",
        "operationId": "read_organization_api_v1_organizations__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      },
      "put": {
        "tags": ["organizations"],
        "summary": "Update Organization",
        "description": "Update organization record\n\nAdmin Only",
        "operationId": "update_organization_api_v1_organizations__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrganizationUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrganizationUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      },
      "post": {
        "tags": ["organizations"],
        "summary": "Create Organization",
        "description": "Create organization record\n\nAdmin Only",
        "operationId": "create_organization_api_v1_organizations__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrganizationCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/billing-contact": {
      "get": {
        "tags": ["organizations"],
        "summary": "Get Organizations Billing Contact",
        "description": "Get Stripe subscription details for an organization",
        "operationId": "get_organizations_billing_contact_api_v1_organizations_billing_contact_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationBillingContact"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      },
      "put": {
        "tags": ["organizations"],
        "summary": "Update Organizations Billing Contact",
        "description": "Create or update billing contact for an organization",
        "operationId": "update_organizations_billing_contact_api_v1_organizations_billing_contact_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBillingContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationBillingContact"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/subscription": {
      "get": {
        "tags": ["organizations"],
        "summary": "Get Organizations Subscription",
        "description": "Get Stripe subscription details for an organization",
        "operationId": "get_organizations_subscription_api_v1_organizations_subscription_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/create-checkout-session": {
      "post": {
        "tags": ["organizations"],
        "summary": "Create Organization Subscription",
        "description": "Create a new Stripe subscription checkout session for an organization\n\nIt doesnt have any items, just sets it up so we can update it with the billing job.",
        "operationId": "create_organization_subscription_api_v1_organizations_create_checkout_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_organization_subscription_api_v1_organizations_create_checkout_session_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Organization Subscription Api V1 Organizations Create Checkout Session Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/create-portal-session": {
      "post": {
        "tags": ["organizations"],
        "summary": "Post Create Portal Session",
        "description": "Create billing portal session for user\n\nCreate a session for billing portal for the provided user and return\nthe url. Caller can then use that to navigate to billing portal session.",
        "operationId": "post_create_portal_session_api_v1_organizations_create_portal_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingPortalConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Create Portal Session Api V1 Organizations Create Portal Session Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/upload-brand": {
      "post": {
        "tags": ["organizations"],
        "summary": "Upload Organization Brand Image",
        "description": "Upload author image",
        "operationId": "upload_organization_brand_image_api_v1_organizations_upload_brand_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Brand Owner Id",
              "description": "Admin Only: Id for the owner of the record"
            },
            "description": "Admin Only: Id for the owner of the record"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_organization_brand_image_api_v1_organizations_upload_brand_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Organization Brand Image Api V1 Organizations Upload Brand Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/users": {
      "get": {
        "tags": ["organizations"],
        "summary": "Read Organization Users",
        "description": "Get organization record\n\nAdmin and Governor can read organizational users. This fetches records for both primary\nand secondary organization status",
        "operationId": "read_organization_users_api_v1_organizations_users_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Organization Id",
              "description": "Admin Only: Id for the organization"
            },
            "description": "Admin Only: Id for the organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OrganizationUser" },
                  "title": "Response Read Organization Users Api V1 Organizations Users Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/submit-a2p": {
      "post": {
        "tags": ["organizations"],
        "summary": "Submit Organization A2P",
        "description": "Submit organization A2P registration\n\nGovernor can submit A2P registration for their organization",
        "operationId": "submit_organization_a2p_api_v1_organizations_submit_a2p_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/organizations/billing-report": {
      "post": {
        "tags": ["organizations"],
        "summary": "Get Organization Billing Report",
        "description": "Get billing report for an organization\n\nReturns a csv file",
        "operationId": "get_organization_billing_report_api_v1_organizations_billing_report_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Organization Billing Report Api V1 Organizations Billing Report Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/orga2ps/": {
      "get": {
        "tags": ["orga2ps"],
        "summary": "Read Orga2Ps",
        "description": "Get OrgA2P records",
        "operationId": "read_orga2ps_api_v1_orga2ps__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrgA2PsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["orga2ps"],
        "summary": "Create Orga2P",
        "description": "Create OrgA2P record",
        "operationId": "create_orga2p_api_v1_orga2ps__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrgA2PCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrgA2P" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/orga2ps/{id}": {
      "get": {
        "tags": ["orga2ps"],
        "summary": "Read Orga2P",
        "description": "Get OrgA2P record",
        "operationId": "read_orga2p_api_v1_orga2ps__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrgA2P" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["orga2ps"],
        "summary": "Update Orga2P",
        "description": "Update OrgA2P record",
        "operationId": "update_orga2p_api_v1_orga2ps__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrgA2PUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrgA2P" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/user": {
      "get": {
        "tags": ["user"],
        "summary": "Read User",
        "description": "Get user record",
        "operationId": "read_user_api_v1_user_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/preferences/": {
      "get": {
        "tags": ["preferences"],
        "summary": "Read Preferences",
        "description": "Get preferences record",
        "operationId": "read_preferences_api_v1_preferences__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Preferences" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["preferences"],
        "summary": "Update Preferences",
        "description": "Update preferences record",
        "operationId": "update_preferences_api_v1_preferences__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PreferencesUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreferencesUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/portrequest/": {
      "get": {
        "tags": ["portrequest"],
        "summary": "Read Portrequest",
        "description": "Get portrequest record",
        "operationId": "read_portrequest_api_v1_portrequest__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PortRequest" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["portrequest"],
        "summary": "Update Portrequest",
        "description": "Update portrequest record",
        "operationId": "update_portrequest_api_v1_portrequest__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PortRequestUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PortRequestUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/portrequest/upload-billing-statement": {
      "post": {
        "tags": ["portrequest"],
        "summary": "Upload Billing Statement",
        "description": "Upload billing statement",
        "operationId": "upload_billing_statement_api_v1_portrequest_upload_billing_statement_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_billing_statement_api_v1_portrequest_upload_billing_statement_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PortRequestUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/portrequest/submit": {
      "post": {
        "tags": ["portrequest"],
        "summary": "Post Submit Portrequest",
        "description": "Submit port request",
        "operationId": "post_submit_portrequest_api_v1_portrequest_submit_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Submit Portrequest Api V1 Portrequest Submit Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/create-checkout-session": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Create Checkout Session",
        "description": "Create checkout portal session for user\n\nCreate a session for checkout for the provided user and product and return\nthe url. Caller can then use that to navigate to checkout session.",
        "operationId": "post_create_checkout_session_api_v1_billing_create_checkout_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_post_create_checkout_session_api_v1_billing_create_checkout_session_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Create Checkout Session Api V1 Billing Create Checkout Session Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/subscribe-drops": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Subscribe Drops",
        "description": "Add drop item to user subscription\n\n\nGet user product id and subscription id and add the drop price id from billing config to subscription",
        "operationId": "post_subscribe_drops_api_v1_billing_subscribe_drops_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Subscribe Drops Api V1 Billing Subscribe Drops Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/subscribe-broadcasts": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Subscribe Broadcasts",
        "description": "Add broadcast item to user subscription\n\n\nGet user product id and subscription id and add the broadcast price id from billing config to subscription",
        "operationId": "post_subscribe_broadcasts_api_v1_billing_subscribe_broadcasts_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Subscribe Broadcasts Api V1 Billing Subscribe Broadcasts Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/subscribe-teams": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Subscribe Teams",
        "description": "Add teams item to user subscription\n\n\nGet user product id and subscription id and add the teams price id from billing config to subscription",
        "operationId": "post_subscribe_teams_api_v1_billing_subscribe_teams_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Subscribe Teams Api V1 Billing Subscribe Teams Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/create-portal-session": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Create Portal Session",
        "description": "Create billing portal session for user\n\nCreate a session for billing portal for the provided user and return\nthe url. Caller can then use that to navigate to billing portal session.",
        "operationId": "post_create_portal_session_api_v1_billing_create_portal_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingPortalConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Create Portal Session Api V1 Billing Create Portal Session Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/end-trial": {
      "post": {
        "tags": ["billing"],
        "summary": "Post End Trial",
        "description": "End a trial\n\nEnd a trial to begin billing, this is for when a payment method is provided already",
        "operationId": "post_end_trial_api_v1_billing_end_trial_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post End Trial Api V1 Billing End Trial Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/payment-methods": {
      "get": {
        "tags": ["billing"],
        "summary": "Get Payment Methods",
        "description": "Get payment methods\n\nList payment methods for user",
        "operationId": "get_payment_methods_api_v1_billing_payment_methods_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BillingPaymentMethod"
                  },
                  "type": "array",
                  "title": "Response Get Payment Methods Api V1 Billing Payment Methods Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/charge-registration": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Charge Registration",
        "description": "Charge registration fee\n\nReturn invoice id if successful\nReturn \"WAIVED\" if registration is waived",
        "operationId": "post_charge_registration_api_v1_billing_charge_registration_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Charge Registration Api V1 Billing Charge Registration Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/report-usage": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Usage Records",
        "description": "Report usage records\n\nReport the usage records for metered billing",
        "operationId": "post_usage_records_api_v1_billing_report_usage_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/UsageRecord" },
                "type": "array",
                "title": "Usagerecords"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Usage Records Api V1 Billing Report Usage Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/change-plan": {
      "post": {
        "tags": ["billing"],
        "summary": "Post Change Plan",
        "description": "Change plan",
        "operationId": "post_change_plan_api_v1_billing_change_plan_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "string", "title": "Productid" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Change Plan Api V1 Billing Change Plan Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/config": {
      "get": {
        "tags": ["billing"],
        "summary": "Read Billingconfig",
        "description": "Get billingconfig records",
        "operationId": "read_billingconfig_api_v1_billing_config_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillingConfig" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      },
      "put": {
        "tags": ["billing"],
        "summary": "Update Billingconfig",
        "description": "Update billingconfig record",
        "operationId": "update_billingconfig_api_v1_billing_config_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BillingConfigUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillingConfigUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      },
      "post": {
        "tags": ["billing"],
        "summary": "Create Billingconfig",
        "description": "Create billingconfig record",
        "operationId": "create_billingconfig_api_v1_billing_config_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BillingConfigCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillingConfig" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/billing/plans": {
      "get": {
        "tags": ["billing"],
        "summary": "Read Billingplans",
        "description": "Get billingplans records",
        "operationId": "read_billingplans_api_v1_billing_plans_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BillingPlans" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/smstemplates/": {
      "get": {
        "tags": ["sms templates"],
        "summary": "Read Smstemplates",
        "description": "Get smstemplate records",
        "operationId": "read_smstemplates_api_v1_smstemplates__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTemplatesPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["sms templates"],
        "summary": "Create Smstemplates",
        "description": "Create smstemplate record",
        "operationId": "create_smstemplates_api_v1_smstemplates__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          },
          {
            "name": "fromTemplateId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SmsTemplateCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SmsTemplate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/smstemplates/{id}": {
      "get": {
        "tags": ["sms templates"],
        "summary": "Read Smstemplate",
        "description": "Get smstemplate record",
        "operationId": "read_smstemplate_api_v1_smstemplates__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SmsTemplate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["sms templates"],
        "summary": "Update Smstemplate",
        "description": "Update smstemplate record",
        "operationId": "update_smstemplate_api_v1_smstemplates__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SmsTemplateUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SmsTemplateUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["sms templates"],
        "summary": "Delete Smstemplate",
        "description": "Delete smstemplate record",
        "operationId": "delete_smstemplate_api_v1_smstemplates__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SmsTemplate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sequences/": {
      "get": {
        "tags": ["sequences"],
        "summary": "Read Sequences",
        "description": "Get sequence records",
        "operationId": "read_sequences_api_v1_sequences__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SequencesPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["sequences"],
        "summary": "Create Sequences",
        "description": "Create sequence record",
        "operationId": "create_sequences_api_v1_sequences__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SequenceCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Sequence" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/sequences/{id}": {
      "get": {
        "tags": ["sequences"],
        "summary": "Read Sequence",
        "description": "Get sequence record",
        "operationId": "read_sequence_api_v1_sequences__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Sequence" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["sequences"],
        "summary": "Update Sequence",
        "description": "Update sequence record",
        "operationId": "update_sequence_api_v1_sequences__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SequenceUpdate-Input" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["sequences"],
        "summary": "Delete Sequence",
        "description": "Delete sequence record",
        "operationId": "delete_sequence_api_v1_sequences__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Sequence" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/crmsync/": {
      "get": {
        "tags": ["crm sync"],
        "summary": "Read Crmsyncs",
        "description": "Get crmsync records",
        "operationId": "read_crmsyncs_api_v1_crmsync__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CrmSyncsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["crm sync"],
        "summary": "Create Crmsyncs",
        "description": "Create crmsync record",
        "operationId": "create_crmsyncs_api_v1_crmsync__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CrmSyncCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CrmSync" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/crmsync/{id}": {
      "get": {
        "tags": ["crm sync"],
        "summary": "Read Crmsync",
        "description": "Get crmsync record",
        "operationId": "read_crmsync_api_v1_crmsync__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CrmSync" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["crm sync"],
        "summary": "Update Crmsync",
        "description": "Update crmsync record",
        "operationId": "update_crmsync_api_v1_crmsync__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CrmSyncUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CrmSyncUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["crm sync"],
        "summary": "Delete Crmsync",
        "description": "Delete crmsync record",
        "operationId": "delete_crmsync_api_v1_crmsync__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CrmSync" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/crmsync/{id}/sync-now": {
      "post": {
        "tags": ["crm sync"],
        "summary": "Run Crmsync Now",
        "description": "Run CRM Sync now",
        "operationId": "run_crmsync_now_api_v1_crmsync__id__sync_now_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Run Crmsync Now Api V1 Crmsync  Id  Sync Now Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/crm/wealthbox/create-opportunity": {
      "post": {
        "tags": ["crm sync"],
        "summary": "Create Wealthbox Opportunity",
        "description": "Create wealthbox opportunity record",
        "operationId": "create_wealthbox_opportunity_api_v1_crm_wealthbox_create_opportunity_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrmWealthboxCreateOpportunity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Wealthbox Opportunity Api V1 Crm Wealthbox Create Opportunity Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/crm/wealthbox/update-contact": {
      "post": {
        "tags": ["crm sync"],
        "summary": "Update Wealthbox Contact",
        "description": "Update wealthbox contact record",
        "operationId": "update_wealthbox_contact_api_v1_crm_wealthbox_update_contact_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "contactId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Contact Id",
              "description": "Id of the contact in the CRM"
            },
            "description": "Id of the contact in the CRM"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "object", "title": "Update In" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update Wealthbox Contact Api V1 Crm Wealthbox Update Contact Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/crm/redtail/create-opportunity": {
      "post": {
        "tags": ["crm sync"],
        "summary": "Create Redtail Opportunity",
        "description": "Create redtail opportunity record",
        "operationId": "create_redtail_opportunity_api_v1_crm_redtail_create_opportunity_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrmRedtailCreateOpportunity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Redtail Opportunity Api V1 Crm Redtail Create Opportunity Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/bankquestions/": {
      "get": {
        "tags": ["bank questions"],
        "summary": "Read Bankquestions",
        "description": "Get bankquestion records",
        "operationId": "read_bankquestions_api_v1_bankquestions__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BankQuestion" },
                  "title": "Response Read Bankquestions Api V1 Bankquestions  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["bank questions"],
        "summary": "Create Bankquestions",
        "description": "Create bankquestion record",
        "operationId": "create_bankquestions_api_v1_bankquestions__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          },
          {
            "name": "fromTemplateId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BankQuestionCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BankQuestion" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/bankquestions/{id}": {
      "get": {
        "tags": ["bank questions"],
        "summary": "Read Bankquestion",
        "description": "Get bankquestion record",
        "operationId": "read_bankquestion_api_v1_bankquestions__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BankQuestion" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["bank questions"],
        "summary": "Update Bankquestion",
        "description": "Update bankquestion record",
        "operationId": "update_bankquestion_api_v1_bankquestions__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BankQuestionUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BankQuestionUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["bank questions"],
        "summary": "Delete Bankquestion",
        "description": "Delete bankquestion record",
        "operationId": "delete_bankquestion_api_v1_bankquestions__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/BankQuestion" },
                    { "type": "string" }
                  ],
                  "title": "Response Delete Bankquestion Api V1 Bankquestions  Id  Delete"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/cairns/": {
      "get": {
        "tags": ["cairns"],
        "summary": "Read Cairns",
        "description": "Get cairn records",
        "operationId": "read_cairns_api_v1_cairns__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CairnsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/cairns/{id}": {
      "get": {
        "tags": ["cairns"],
        "summary": "Read Cairn",
        "description": "Get cairn record",
        "operationId": "read_cairn_api_v1_cairns__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cairn" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journey/": {
      "get": {
        "tags": ["journey"],
        "summary": "Read Journey",
        "description": "Get journey record",
        "operationId": "read_journey_api_v1_journey__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Journey" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["journey"],
        "summary": "Update Journey",
        "description": "Update journey record",
        "operationId": "update_journey_api_v1_journey__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/JourneyUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JourneyUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journey/mark-complete": {
      "post": {
        "tags": ["journey"],
        "summary": "Mark Complete",
        "description": "Update journey completions",
        "operationId": "mark_complete_api_v1_journey_mark_complete_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/JourneyListIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JourneyUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/journey/mark-incomplete": {
      "post": {
        "tags": ["journey"],
        "summary": "Mark Incomplete",
        "description": "Update journey completions",
        "operationId": "mark_incomplete_api_v1_journey_mark_incomplete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/JourneyListIn" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/JourneyUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/": {
      "get": {
        "tags": ["connectors"],
        "summary": "Read Connectors",
        "description": "Get connector records",
        "operationId": "read_connectors_api_v1_connectors__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Workspace Id",
              "description": "Workspace Id to get data for"
            },
            "description": "Workspace Id to get data for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConnectorsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["connectors"],
        "summary": "Create Connector",
        "description": "Create connector record",
        "operationId": "create_connector_api_v1_connectors__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Workspace Id",
              "description": "Workspace Id to get data for"
            },
            "description": "Workspace Id to get data for"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConnectorCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connector" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/device": {
      "post": {
        "tags": ["connectors"],
        "summary": "Create Mobile Device Connector",
        "description": "Create mobile connector record",
        "operationId": "create_mobile_device_connector_api_v1_connectors_device_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConnectorMetaMobile" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connector" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/redtail-api-token": {
      "post": {
        "tags": ["connectors"],
        "summary": "Get Redtail Api Token",
        "description": "Get redtail api token",
        "operationId": "get_redtail_api_token_api_v1_connectors_redtail_api_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorMetaRedtailApiTokenIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Redtail Api Token Api V1 Connectors Redtail Api Token Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/redtail-api-list": {
      "post": {
        "tags": ["connectors"],
        "summary": "Get Redtail Api List",
        "description": "Get redtail api list\n\nGet list of valid values for a given property",
        "operationId": "get_redtail_api_list_api_v1_connectors_redtail_api_list_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorMetaRedtailApiListIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Redtail Api List Api V1 Connectors Redtail Api List Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/wealthbox-api-list": {
      "post": {
        "tags": ["connectors"],
        "summary": "Post Wealthbox Api List",
        "description": "Get wealthbox api list\n\nGet list of valid values for a given property",
        "operationId": "post_wealthbox_api_list_api_v1_connectors_wealthbox_api_list_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorMetaWealthBoxApiListIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Wealthbox Api List Api V1 Connectors Wealthbox Api List Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/agentcore-api-list": {
      "post": {
        "tags": ["connectors"],
        "summary": "Get Agentcore Api List",
        "description": "Get agentcore api list\n\nGet list of valid values for a given property",
        "operationId": "get_agentcore_api_list_api_v1_connectors_agentcore_api_list_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorMetaAgentCoreApiListIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorMetaAgentCoreApiListOut"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/medicarepro-api-list": {
      "post": {
        "tags": ["connectors"],
        "summary": "Get Medicarepro Api List",
        "description": "Get medicarepro api list\n\nGet list of valid values for a given property",
        "operationId": "get_medicarepro_api_list_api_v1_connectors_medicarepro_api_list_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorMetaMedicareProApiListIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorMetaMedicareProApiListOut"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/radiusbob-api-list": {
      "post": {
        "tags": ["connectors"],
        "summary": "Get Radiusbob Api List",
        "description": "Get radiusbob api list\n\nGet list of valid values for a given property",
        "operationId": "get_radiusbob_api_list_api_v1_connectors_radiusbob_api_list_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorMetaRadiusBobApiListIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorMetaRadiusBobApiListOut"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/connectors/{id}": {
      "get": {
        "tags": ["connectors"],
        "summary": "Read Connector",
        "description": "Get connector record",
        "operationId": "read_connector_api_v1_connectors__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connector" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["connectors"],
        "summary": "Update Connector",
        "description": "Update connector record",
        "operationId": "update_connector_api_v1_connectors__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorUserUpdate-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorUserUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["connectors"],
        "summary": "Delete Connector",
        "description": "Delete connector record",
        "operationId": "delete_connector_api_v1_connectors__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Workspace Id",
              "description": "Workspace Id to get data for"
            },
            "description": "Workspace Id to get data for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connector" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/list": {
      "get": {
        "tags": ["connectors"],
        "summary": "Read Connector List Options",
        "description": "Get connector record and list types",
        "operationId": "read_connector_list_options_api_v1_connectors__id__list_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "listType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "List type",
              "description": "Type of list to return from type options in crm connectors"
            },
            "description": "Type of list to return from type options in crm connectors"
          },
          {
            "name": "listFilterId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "List filter id",
              "description": "Additional info to filter by in the list"
            },
            "description": "Additional info to filter by in the list"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectorListTypeOption"
                  },
                  "title": "Response Read Connector List Options Api V1 Connectors  Id  List Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/task": {
      "post": {
        "tags": ["connectors"],
        "summary": "Post Connector Task",
        "description": "Post task to crm connector\n\nCreate a task in a crm",
        "operationId": "post_connector_task_api_v1_connectors__id__task_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConnectorTaskCreateIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Connector Task Api V1 Connectors  Id  Task Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/notes": {
      "post": {
        "tags": ["connectors"],
        "summary": "Post Connector Note",
        "description": "Post note to crm connector\n\nCreate a note in a crm",
        "operationId": "post_connector_note_api_v1_connectors__id__notes_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConnectorNoteCreateIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Connector Note Api V1 Connectors  Id  Notes Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/workflow": {
      "post": {
        "tags": ["connectors"],
        "summary": "Post Connector Workflow",
        "description": "Post workflow to crm connector\n\nCreate a workflow in a crm",
        "operationId": "post_connector_workflow_api_v1_connectors__id__workflow_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorWorkflowCreateIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Connector Workflow Api V1 Connectors  Id  Workflow Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/contacts-search/": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connector Contacts Search",
        "description": "Get contacts for the contact from crm connector",
        "operationId": "get_connector_contacts_search_api_v1_connectors__id__contacts_search__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Phone"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectorCrmContact"
                  },
                  "title": "Response Get Connector Contacts Search Api V1 Connectors  Id  Contacts Search  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/contact": {
      "post": {
        "tags": ["connectors"],
        "summary": "Post Connector Contact",
        "description": "Post contact to crm connector\n\nCreate a contact in a crm",
        "operationId": "post_connector_contact_api_v1_connectors__id__contact_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ConnectorContactCreateInWealthbox"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectorContactCreateInRedtail"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectorContactCreateInHubspot"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectorContactCreateInMedicarePro"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectorContactCreateInQuivr"
                  }
                ],
                "title": "Create In"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post Connector Contact Api V1 Connectors  Id  Contact Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/contact-notes/{contactId}": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connector Contact Notes",
        "description": "Get notes for the contact from crm connector",
        "operationId": "get_connector_contact_notes_api_v1_connectors__id__contact_notes__contactId__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Contactid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Connector Contact Notes Api V1 Connectors  Id  Contact Notes  Contactid  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/contact-events/{contactId}": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connector Contact Events",
        "description": "Get events for the contact from crm connector",
        "operationId": "get_connector_contact_events_api_v1_connectors__id__contact_events__contactId__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Contactid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConnectorCrmEvent" },
                  "title": "Response Get Connector Contact Events Api V1 Connectors  Id  Contact Events  Contactid  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/connectors/{id}/contact-tasks/{contactId}": {
      "get": {
        "tags": ["connectors"],
        "summary": "Get Connector Contact Tasks",
        "description": "Get tasks for the contact from crm connector",
        "operationId": "get_connector_contact_tasks_api_v1_connectors__id__contact_tasks__contactId__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Contactid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConnectorCrmTask" },
                  "title": "Response Get Connector Contact Tasks Api V1 Connectors  Id  Contact Tasks  Contactid  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/automation-rules/": {
      "get": {
        "tags": ["automation rules"],
        "summary": "Read Automationrules",
        "description": "Get automationrule records",
        "operationId": "read_automationrules_api_v1_automation_rules__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Is Active",
              "description": "Filter records that are active"
            },
            "description": "Filter records that are active"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationRulesPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["automation rules"],
        "summary": "Create Automationrules",
        "description": "Create automationrule record",
        "operationId": "create_automationrules_api_v1_automation_rules__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AutomationRuleCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AutomationRule" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/automation-rules/{id}": {
      "get": {
        "tags": ["automation rules"],
        "summary": "Read Automationrule",
        "description": "Get automationrule record",
        "operationId": "read_automationrule_api_v1_automation_rules__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AutomationRule" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["automation rules"],
        "summary": "Update Automationrule",
        "description": "Update automationrule record",
        "operationId": "update_automationrule_api_v1_automation_rules__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AutomationRuleUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationRuleUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["automation rules"],
        "summary": "Delete Automationrule",
        "description": "Delete automationrule record",
        "operationId": "delete_automationrule_api_v1_automation_rules__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AutomationRule" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingrules/": {
      "get": {
        "tags": ["routing rules"],
        "summary": "Read Routingrules",
        "description": "Get routingrule records\n\nThe event name is used to get all the exact event name matches, plus any more general rules that match the event name.\ne.g. SMS_SENT will also match with SMS_LOG, since sent it part of the log",
        "operationId": "read_routingrules_api_v1_routingrules__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Active rules",
              "description": "Filter to only active rules"
            },
            "description": "Filter to only active rules"
          },
          {
            "name": "eventName",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/RoutingEventNamesEnum" },
                { "type": "null" }
              ],
              "title": "Event Name",
              "description": "Filter to only rules for a specific event"
            },
            "description": "Filter to only rules for a specific event"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingRulesPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["routing rules"],
        "summary": "Create Routingrules",
        "description": "Create routingrule record",
        "operationId": "create_routingrules_api_v1_routingrules__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/RoutingRuleUpdate-Input" },
                    { "$ref": "#/components/schemas/RoutingRuleCreate" }
                  ]
                },
                "title": "Routingrules In"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutingRule-Output"
                  },
                  "title": "Response Create Routingrules Api V1 Routingrules  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingrules/{id}": {
      "get": {
        "tags": ["routing rules"],
        "summary": "Read Routingrule",
        "description": "Get routingrule record",
        "operationId": "read_routingrule_api_v1_routingrules__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingRule-Output" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["routing rules"],
        "summary": "Update Routingrule",
        "description": "Update routingrule record",
        "operationId": "update_routingrule_api_v1_routingrules__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingRuleUpdate-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingRuleUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["routing rules"],
        "summary": "Delete Routingrule",
        "description": "Delete routingrule record",
        "operationId": "delete_routingrule_api_v1_routingrules__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingRule-Output" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/rollcall/": {
      "get": {
        "tags": ["roll call"],
        "summary": "Read Rollcall",
        "description": "Get rollcall record",
        "operationId": "read_rollcall_api_v1_rollcall__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RollCall" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      },
      "put": {
        "tags": ["roll call"],
        "summary": "Update Rollcall",
        "description": "Update rollcall record",
        "operationId": "update_rollcall_api_v1_rollcall__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RollCallUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RollCallUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/rollcall/online": {
      "post": {
        "tags": ["roll call"],
        "summary": "Rollcall Online",
        "description": "Deprecated: Using liveblocks now\n\nRollCall mark user online\n\nUsing liveblocks now",
        "operationId": "rollcall_online_api_v1_rollcall_online_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Rollcall Online Api V1 Rollcall Online Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/rollcall/conversation": {
      "post": {
        "tags": ["roll call"],
        "summary": "Rollcall Conversation",
        "description": "Deprecated: Using liveblocks now\n\nRollCall mark user viewing conversation\n\nReturn the roll call updates",
        "operationId": "rollcall_conversation_api_v1_rollcall_conversation_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RollCallViewingUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RollCallUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/routingbuckets/": {
      "get": {
        "tags": ["routing buckets"],
        "summary": "Read Routingbuckets",
        "description": "Get routingbucket records",
        "operationId": "read_routingbuckets_api_v1_routingbuckets__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search",
              "description": "Filter to records containing value"
            },
            "description": "Filter to records containing value"
          },
          {
            "name": "isShowScheduled",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Is Scheduled",
              "description": "Filter records that are scheduled"
            },
            "description": "Filter records that are scheduled"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "End Time",
              "description": "Dont get any buckets after this time"
            },
            "description": "Dont get any buckets after this time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingBucketsPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingbuckets/full": {
      "get": {
        "tags": ["routing buckets"],
        "summary": "Read Routingbuckets Full",
        "description": "Get full routingbucket records\n\nAdmin only: get the full bucket records including the s3 locations",
        "operationId": "read_routingbuckets_full_api_v1_routingbuckets_full_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "End Time",
              "description": "Dont get any buckets after this time"
            },
            "description": "Dont get any buckets after this time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingBucketsPaginatedFull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingbuckets/fill": {
      "post": {
        "tags": ["routing buckets"],
        "summary": "Add Item",
        "description": "Create routingbucket items record",
        "operationId": "add_item_api_v1_routingbuckets_fill_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "isUpdate",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Is Update",
              "description": "If fill is a known update, not create of item"
            },
            "description": "If fill is a known update, not create of item"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_add_item_api_v1_routingbuckets_fill_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingBucketFull" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingbuckets/{id}": {
      "get": {
        "tags": ["routing buckets"],
        "summary": "Read Routingbucket",
        "description": "Get routingbucket record",
        "operationId": "read_routingbucket_api_v1_routingbuckets__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingBucket" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["routing buckets"],
        "summary": "Update Routingbucket",
        "description": "Update routingbucket record",
        "operationId": "update_routingbucket_api_v1_routingbuckets__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingBucketUpdate-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingBucketUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingbuckets/{id}/full": {
      "get": {
        "tags": ["routing buckets"],
        "summary": "Read Routingbucket Full",
        "description": "Get routingbucket record\n\nAdmin only",
        "operationId": "read_routingbucket_full_api_v1_routingbuckets__id__full_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingBucketFull" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingbucketitems/": {
      "get": {
        "tags": ["routing bucket items"],
        "summary": "Read Routingbucketitems",
        "description": "Get routingbucketitem records",
        "operationId": "read_routingbucketitems_api_v1_routingbucketitems__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "bucketId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Bucket id",
              "description": "Filter to to just the specific bucket id"
            },
            "description": "Filter to to just the specific bucket id"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingBucketItemsPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["routing bucket items"],
        "summary": "Create Routingbucketitem",
        "description": "Create routingbucket items record",
        "operationId": "create_routingbucketitem_api_v1_routingbucketitems__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingBucketItemCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingBucketItem" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/routingbucketitems/bucket/{bucketId}/item/{itemId}": {
      "get": {
        "tags": ["routing bucket items"],
        "summary": "Read Routingbucketitem",
        "description": "Get routingbucketitem record",
        "operationId": "read_routingbucketitem_api_v1_routingbucketitems_bucket__bucketId__item__itemId__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Bucketid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Itemid" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoutingBucketItem" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["routing bucket items"],
        "summary": "Update Routingbucket",
        "description": "Update routingbucket record",
        "operationId": "update_routingbucket_api_v1_routingbucketitems_bucket__bucketId__item__itemId__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Bucketid" }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Itemid" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingBucketItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingBucketItemUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/useraudios/": {
      "get": {
        "tags": ["useraudio"],
        "summary": "Read Useraudio Collection",
        "description": "Get useraudio records",
        "operationId": "read_useraudio_collection_api_v1_useraudios__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAudioPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["useraudio"],
        "summary": "Create Upload Useraudio",
        "description": "Create useraudio record",
        "operationId": "create_upload_useraudio_api_v1_useraudios__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserAudioCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAudio" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/useraudios/{id}": {
      "get": {
        "tags": ["useraudio"],
        "summary": "Read Useraudio",
        "description": "Get useraudio record",
        "operationId": "read_useraudio_api_v1_useraudios__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAudio" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["useraudio"],
        "summary": "Update Useraudio",
        "description": "Update useraudio record",
        "operationId": "update_useraudio_api_v1_useraudios__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserAudioUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAudioUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["useraudio"],
        "summary": "Delete Useraudio",
        "description": "Delete useraudio record",
        "operationId": "delete_useraudio_api_v1_useraudios__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAudio" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/useraudios/upload-audio": {
      "post": {
        "tags": ["useraudio"],
        "summary": "Upload Audio File",
        "description": "Update audio file\n\nUpload file to unique s3 location and return public url",
        "operationId": "upload_audio_file_api_v1_useraudios_upload_audio_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_audio_file_api_v1_useraudios_upload_audio_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Audio File Api V1 Useraudios Upload Audio Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/usermedia/": {
      "get": {
        "tags": ["usermedia"],
        "summary": "Read Usermedia Collection",
        "description": "Get usermedia records",
        "operationId": "read_usermedia_collection_api_v1_usermedia__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserMediaPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["usermedia"],
        "summary": "Create Upload Usermedia",
        "description": "Create usermedia record",
        "operationId": "create_upload_usermedia_api_v1_usermedia__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          },
          {
            "name": "skipCreate",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Skip create",
              "description": "Doesnt create media item just artifact for one time use"
            },
            "description": "Doesnt create media item just artifact for one time use"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_upload_usermedia_api_v1_usermedia__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/UserMedia" },
                    { "$ref": "#/components/schemas/UserMediaCreate" }
                  ],
                  "title": "Response Create Upload Usermedia Api V1 Usermedia  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/usermedia/generate-upload-link": {
      "post": {
        "tags": ["usermedia"],
        "summary": "Create Upload Video Link",
        "description": "Get media file link for upload",
        "operationId": "create_upload_video_link_api_v1_usermedia_generate_upload_link_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUploadVideoLinkIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PresignUrlPost" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/usermedia/{id}": {
      "get": {
        "tags": ["usermedia"],
        "summary": "Read Usermedia",
        "description": "Get usermedia record",
        "operationId": "read_usermedia_api_v1_usermedia__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserMedia" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["usermedia"],
        "summary": "Update Usermedia",
        "description": "Update usermedia record",
        "operationId": "update_usermedia_api_v1_usermedia__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserMediaUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserMediaUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["usermedia"],
        "summary": "Delete Usermedia",
        "description": "Delete usermedia record",
        "operationId": "delete_usermedia_api_v1_usermedia__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserMedia" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/rooms/authorize-user": {
      "post": {
        "tags": ["rooms"],
        "summary": "Post Authorize User",
        "description": "Get authorize user token\n\nUse open ai to friendly-ize the text",
        "operationId": "post_authorize_user_api_v1_rooms_authorize_user_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Authorize User Api V1 Rooms Authorize User Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/vcards/": {
      "get": {
        "tags": ["vcard"],
        "summary": "Read Vcard Collection",
        "description": "Get vcard records",
        "operationId": "read_vcard_collection_api_v1_vcards__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VCardPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["vcard"],
        "summary": "Create Vcard",
        "description": "Create vcard record",
        "operationId": "create_vcard_api_v1_vcards__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VCardCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VCard" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/vcards/upload": {
      "post": {
        "tags": ["vcard"],
        "summary": "Upload Vcard Image",
        "description": "Update vcard image",
        "operationId": "upload_vcard_image_api_v1_vcards_upload_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_vcard_image_api_v1_vcards_upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Upload Vcard Image Api V1 Vcards Upload Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/vcards/{id}": {
      "get": {
        "tags": ["vcard"],
        "summary": "Read Vcard",
        "description": "Get vcard record",
        "operationId": "read_vcard_api_v1_vcards__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VCard" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["vcard"],
        "summary": "Update Vcard",
        "description": "Update vcard record",
        "operationId": "update_vcard_api_v1_vcards__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VCardUpdate-Input" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VCardUpdate-Output" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["vcard"],
        "summary": "Delete Vcard",
        "description": "Delete vcard record",
        "operationId": "delete_vcard_api_v1_vcards__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VCard" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/": {
      "get": {
        "tags": ["users"],
        "summary": "Read Users",
        "description": "Get user records",
        "operationId": "read_users_api_v1_users__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Is Active",
              "description": "Filter records that are active"
            },
            "description": "Filter records that are active"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileAdminPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Read User",
        "description": "Get user record",
        "operationId": "read_user_api_v1_users__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileInDBAdmin"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/team-members/": {
      "get": {
        "tags": ["team members"],
        "summary": "Read Teammembers",
        "description": "Get team member records",
        "operationId": "read_teammembers_api_v1_team_members__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMembersPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["team members"],
        "summary": "Create Teammembers",
        "description": "Create teammember record",
        "operationId": "create_teammembers_api_v1_team_members__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          },
          {
            "name": "isSuppressInvites",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Is Supress Invite",
              "description": "If true, the teammember will not receive an email invite to the workspace",
              "default": false
            },
            "description": "If true, the teammember will not receive an email invite to the workspace"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/TeamMemberCreate" },
                "title": "Teammembers In"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TeamMemberCreate" },
                  "title": "Response Create Teammembers Api V1 Team Members  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/team-members/me": {
      "get": {
        "tags": ["team members"],
        "summary": "Read My Teammember Profile",
        "description": "Get my teammember record",
        "operationId": "read_my_teammember_profile_api_v1_team_members_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/team-members/{id}": {
      "get": {
        "tags": ["team members"],
        "summary": "Read Teammember",
        "description": "Get teammember record",
        "operationId": "read_teammember_api_v1_team_members__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["team members"],
        "summary": "Update Teammember",
        "description": "Update teammember record",
        "operationId": "update_teammember_api_v1_team_members__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TeamMemberUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["team members"],
        "summary": "Delete Teammember",
        "description": "Delete teammember record",
        "operationId": "delete_teammember_api_v1_team_members__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMember" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/team-members/{id}/uploadbranding": {
      "post": {
        "tags": ["team members"],
        "summary": "Upload Teammember Branding Image",
        "description": "Update profile branding image",
        "operationId": "upload_teammember_branding_image_api_v1_team_members__id__uploadbranding_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_teammember_branding_image_api_v1_team_members__id__uploadbranding_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/team-members/{id}/enable": {
      "post": {
        "tags": ["team members"],
        "summary": "Enable Teammember",
        "description": "Enable teammember record",
        "operationId": "enable_teammember_api_v1_team_members__id__enable_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/team-members/{id}/disable": {
      "post": {
        "tags": ["team members"],
        "summary": "Disable Teammember",
        "description": "Disable teammember record",
        "operationId": "disable_teammember_api_v1_team_members__id__disable_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamMemberUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/shorturls/": {
      "get": {
        "tags": ["shorturls"],
        "summary": "Read Shorturls",
        "description": "Get shorturl records",
        "operationId": "read_shorturls_api_v1_shorturls__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShortUrlsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["shorturls"],
        "summary": "Create Shorturls",
        "description": "Create shorturl record\n\nThis is for a user, so we will add prefix u/",
        "operationId": "create_shorturls_api_v1_shorturls__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShortUrlCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShortUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/shorturls/check/{shortId}": {
      "get": {
        "tags": ["shorturls"],
        "summary": "Check Shorturl Id",
        "description": "Check shorturl id is available\n\nThis is for a user, so we will add prefix u/",
        "operationId": "check_shorturl_id_api_v1_shorturls_check__shortId__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "shortId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Shortid" }
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Domain",
              "description": "Domain to check if shorturl is available"
            },
            "description": "Domain to check if shorturl is available"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Check Shorturl Id Api V1 Shorturls Check  Shortid  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/shorturls/{id}": {
      "get": {
        "tags": ["shorturls"],
        "summary": "Read Shorturl",
        "description": "Get shorturl record",
        "operationId": "read_shorturl_api_v1_shorturls__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShortUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["shorturls"],
        "summary": "Update Shorturl",
        "description": "Update shorturl record",
        "operationId": "update_shorturl_api_v1_shorturls__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShortUrlUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShortUrlUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["shorturls"],
        "summary": "Delete Shorturl",
        "description": "Delete shorturl record",
        "operationId": "delete_shorturl_api_v1_shorturls__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShortUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand/": {
      "get": {
        "tags": ["brand"],
        "summary": "Read Brand",
        "description": "Get brand record",
        "operationId": "read_brand_api_v1_brand__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Brand" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["brand"],
        "summary": "Update Brand",
        "description": "Update brand record",
        "operationId": "update_brand_api_v1_brand__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand/upload-brand": {
      "post": {
        "tags": ["brand"],
        "summary": "Upload Brand Image",
        "description": "Upload author image",
        "operationId": "upload_brand_image_api_v1_brand_upload_brand_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Brand Owner Id",
              "description": "Admin Only: Id for the owner of the record"
            },
            "description": "Admin Only: Id for the owner of the record"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_brand_image_api_v1_brand_upload_brand_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Brand Image Api V1 Brand Upload Brand Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand-domains/": {
      "get": {
        "tags": ["branddomain"],
        "summary": "Read Branddomains",
        "description": "Get branddomain records",
        "operationId": "read_branddomains_api_v1_brand_domains__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDomainsPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["branddomain"],
        "summary": "Create Branddomain",
        "description": "Create branddomain record",
        "operationId": "create_branddomain_api_v1_brand_domains__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandDomainCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandDomain" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand-domains/{id}": {
      "get": {
        "tags": ["branddomain"],
        "summary": "Read Branddomain",
        "description": "Get branddomain record",
        "operationId": "read_branddomain_api_v1_brand_domains__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandDomain" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["branddomain"],
        "summary": "Update Branddomain",
        "description": "Update branddomain record",
        "operationId": "update_branddomain_api_v1_brand_domains__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandDomainUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandDomainUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["branddomain"],
        "summary": "Delete Branddomain",
        "description": "Delete branddomain record",
        "operationId": "delete_branddomain_api_v1_brand_domains__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandDomain" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand-domains/{id}/refresh": {
      "post": {
        "tags": ["branddomain"],
        "summary": "Refresh Branddomain",
        "description": "Refresh branddomain CNAME verification",
        "operationId": "refresh_branddomain_api_v1_brand_domains__id__refresh_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandDomainUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand-urls/": {
      "get": {
        "tags": ["brandurl"],
        "summary": "Read Brandurls",
        "description": "Get brand URL records",
        "operationId": "read_brandurls_api_v1_brand_urls__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrlPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["brandurl"],
        "summary": "Create Brandurl",
        "description": "Create brand URL record",
        "operationId": "create_brandurl_api_v1_brand_urls__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandUrlCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand-urls/{id}": {
      "get": {
        "tags": ["brandurl"],
        "summary": "Read Brandurl",
        "description": "Get brand URL record",
        "operationId": "read_brandurl_api_v1_brand_urls__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["brandurl"],
        "summary": "Update Brandurl",
        "description": "Update brand URL record",
        "operationId": "update_brandurl_api_v1_brand_urls__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BrandUrlUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrlUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["brandurl"],
        "summary": "Delete Brandurl",
        "description": "Delete brand URL record",
        "operationId": "delete_brandurl_api_v1_brand_urls__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/brand-urls/lookup/{domain}/{short_id}": {
      "get": {
        "tags": ["brandurl"],
        "summary": "Lookup Brandurl",
        "description": "Look up brand URL by domain and short ID",
        "operationId": "lookup_brandurl_api_v1_brand_urls_lookup__domain___short_id__get",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Domain name to look up",
              "title": "Domain"
            },
            "description": "Domain name to look up"
          },
          {
            "name": "short_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Short ID to look up",
              "title": "Short Id"
            },
            "description": "Short ID to look up"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/": {
      "get": {
        "tags": ["videos"],
        "summary": "Read Video Collection",
        "description": "Get video records",
        "operationId": "read_video_collection_api_v1_videos__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VideosPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["videos"],
        "summary": "Create Upload Video",
        "description": "Create video record",
        "operationId": "create_upload_video_api_v1_videos__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VideoCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Video" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/record-token": {
      "get": {
        "tags": ["videos"],
        "summary": "Get Record Token",
        "description": "Get recording token",
        "operationId": "get_record_token_api_v1_videos_record_token_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Record Token Api V1 Videos Record Token Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/videos/{id}/upload-author": {
      "post": {
        "tags": ["videos"],
        "summary": "Upload Video Author Image",
        "description": "Upload author image",
        "operationId": "upload_video_author_image_api_v1_videos__id__upload_author_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Video Owner Id",
              "description": "Admin Only: Id for the owner of the record"
            },
            "description": "Admin Only: Id for the owner of the record"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_video_author_image_api_v1_videos__id__upload_author_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Video Author Image Api V1 Videos  Id  Upload Author Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/{id}/upload-favicon": {
      "post": {
        "tags": ["videos"],
        "summary": "Upload Video Favicon Image",
        "description": "Upload favicon image",
        "operationId": "upload_video_favicon_image_api_v1_videos__id__upload_favicon_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Video Owner Id",
              "description": "Admin Only: Id for the owner of the record"
            },
            "description": "Admin Only: Id for the owner of the record"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_video_favicon_image_api_v1_videos__id__upload_favicon_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Video Favicon Image Api V1 Videos  Id  Upload Favicon Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/{id}/upload-brand": {
      "post": {
        "tags": ["videos"],
        "summary": "Upload Video Brand Image",
        "description": "Upload author image",
        "operationId": "upload_video_brand_image_api_v1_videos__id__upload_brand_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Video Owner Id",
              "description": "Admin Only: Id for the owner of the record"
            },
            "description": "Admin Only: Id for the owner of the record"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_video_brand_image_api_v1_videos__id__upload_brand_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Video Brand Image Api V1 Videos  Id  Upload Brand Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/generate-upload-link": {
      "post": {
        "tags": ["videos"],
        "summary": "Create Upload Video Link",
        "description": "Get video file link for upload",
        "operationId": "create_upload_video_link_api_v1_videos_generate_upload_link_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUploadVideoLinkIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PresignUrlPost" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/{id}": {
      "get": {
        "tags": ["videos"],
        "summary": "Read Video",
        "description": "Get video record",
        "operationId": "read_video_api_v1_videos__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Video" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["videos"],
        "summary": "Update Video",
        "description": "Update video record",
        "operationId": "update_video_api_v1_videos__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VideoUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VideoUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["videos"],
        "summary": "Delete Video",
        "description": "Delete video record",
        "operationId": "delete_video_api_v1_videos__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Video" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/videos/{id}/views": {
      "get": {
        "tags": ["videos"],
        "summary": "Read Video Views",
        "description": "Get video record views",
        "operationId": "read_video_views_api_v1_videos__id__views_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VideoViewsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/voice/": {
      "get": {
        "tags": ["voice"],
        "summary": "Read Voice Collection",
        "description": "Get voice records",
        "operationId": "read_voice_collection_api_v1_voice__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VoicesPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["voice"],
        "summary": "Create Voice",
        "description": "Create voice record",
        "operationId": "create_voice_api_v1_voice__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VoiceCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Voice" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/voice/{id}": {
      "get": {
        "tags": ["voice"],
        "summary": "Read Voice",
        "description": "Get voice record",
        "operationId": "read_voice_api_v1_voice__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Voice" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["voice"],
        "summary": "Update Voice",
        "description": "Update voice record",
        "operationId": "update_voice_api_v1_voice__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VoiceUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VoiceUpdate" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["voice"],
        "summary": "Delete Voice",
        "description": "Delete voice record",
        "operationId": "delete_voice_api_v1_voice__id__delete",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Voice" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/voice/upload-audio": {
      "post": {
        "tags": ["voice"],
        "summary": "Upload Audio File",
        "description": "Update audio file\n\nUpload file to unique s3 location and return public url",
        "operationId": "upload_audio_file_api_v1_voice_upload_audio_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_audio_file_api_v1_voice_upload_audio_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Audio File Api V1 Voice Upload Audio Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/video-views/": {
      "get": {
        "tags": ["video views"],
        "summary": "Read Videoviews",
        "description": "Get videoview records",
        "operationId": "read_videoviews_api_v1_video_views__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VideoViewsPaginated" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["video views"],
        "summary": "Create Videoviews",
        "description": "Create videoview record",
        "operationId": "create_videoviews_api_v1_video_views__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VideoViewCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VideoView" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/video-tutorials/": {
      "get": {
        "tags": ["video tutorials"],
        "summary": "Read Videotutorials",
        "description": "Get videotutorial records",
        "operationId": "read_videotutorials_api_v1_video_tutorials__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoTutorialsPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/video-tutorials/{id}": {
      "get": {
        "tags": ["video tutorials"],
        "summary": "Read Videotutorial",
        "description": "Get videotutorial record",
        "operationId": "read_videotutorial_api_v1_video_tutorials__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VideoTutorial" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/community-templates/": {
      "get": {
        "tags": ["community templates"],
        "summary": "Read Communitytemplates",
        "description": "Get communitytemplate records",
        "operationId": "read_communitytemplates_api_v1_community_templates__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityTemplatesPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/a2p/step-1/create-customer-profile/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Create Customer Profile For User",
        "description": "Create customer profile for user\n\nStep 1 of A2P registration\n\nStatus callback will be set to ops/api/v1/public/twilio/webhooks/customer-profiles/{userId}",
        "operationId": "create_customer_profile_for_user_api_v1_a2p_step_1_create_customer_profile__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Customer Profile For User Api V1 A2P Step 1 Create Customer Profile  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-2/create-trust-bundle/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Create Trust Bundle For User",
        "description": "Create trust bundle for user\n\nStep 2 of A2P registration\n\n\nStatus callback will be set to ops/api/v1/public/twilio/webhooks/trust-products/{userId}",
        "operationId": "create_trust_bundle_for_user_api_v1_a2p_step_2_create_trust_bundle__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Trust Bundle For User Api V1 A2P Step 2 Create Trust Bundle  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-3/create-brand/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Create Brand For User",
        "description": "Create brand bundle for user\n\nStep 3 of A2P registration\n\nShould be called after customer profile is approved",
        "operationId": "create_brand_for_user_api_v1_a2p_step_3_create_brand__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Brand For User Api V1 A2P Step 3 Create Brand  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-4/create-message-service/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Create Message Service For User",
        "description": "Create message service for user\n\nStep 4 of A2P registration\n\nSHould be called after brand is approved",
        "operationId": "create_message_service_for_user_api_v1_a2p_step_4_create_message_service__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Message Service For User Api V1 A2P Step 4 Create Message Service  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-5/create-campaign/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Create Campaign For User",
        "description": "Create campaign for user\n\nStep 5 of A2P registration\n\nShould be called after message service is created",
        "operationId": "create_campaign_for_user_api_v1_a2p_step_5_create_campaign__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Campaign For User Api V1 A2P Step 5 Create Campaign  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-6/assign-number-to-service/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Assign Number To Service For User",
        "description": "Assign number to service for user\n\nStep 6 of A2P registration\n\nShould be called after campaign is verified",
        "operationId": "assign_number_to_service_for_user_api_v1_a2p_step_6_assign_number_to_service__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Assign Number To Service For User Api V1 A2P Step 6 Assign Number To Service  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-7/assign-number-to-profile/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Assign Number To Profile For User",
        "description": "Assign number to profile for user\n\nStep 7 of A2P registration\n\nShould be called after number is assigned to service",
        "operationId": "assign_number_to_profile_for_user_api_v1_a2p_step_7_assign_number_to_profile__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Assign Number To Profile For User Api V1 A2P Step 7 Assign Number To Profile  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-8/setup-cnam/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Setup Cnam For User",
        "description": "Setup CNAM for user\n\nStep 8 of A2P registration\n\nShould be called after number is assigned to profile",
        "operationId": "setup_cnam_for_user_api_v1_a2p_step_8_setup_cnam__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Cnam For User Api V1 A2P Step 8 Setup Cnam  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-9/setup-shaken-stir/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Setup Shaken Stir For User",
        "description": "Setup Shaken Stir for user\n\nStep 9 of A2P registration\n\nShould be called after number is assigned to profile",
        "operationId": "setup_shaken_stir_for_user_api_v1_a2p_step_9_setup_shaken_stir__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Shaken Stir For User Api V1 A2P Step 9 Setup Shaken Stir  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-10/report-cnam/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Report Cnam For User",
        "description": "Report CNAM for user\n\nStep 10 of A2P registration\n\nShould be called after cnam status webhook is triggered",
        "operationId": "report_cnam_for_user_api_v1_a2p_step_10_report_cnam__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Report Cnam For User Api V1 A2P Step 10 Report Cnam  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/step-11/report-shaken-stir/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Report Shaken Stir For User",
        "description": "Report Shaken Stir for user\n\nStep 11 of A2P registration\n\nShould be called after shaken stir status webhook is triggered",
        "operationId": "report_shaken_stir_for_user_api_v1_a2p_step_11_report_shaken_stir__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Report Shaken Stir For User Api V1 A2P Step 11 Report Shaken Stir  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/refresh-number-registration/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Refresh Number Registration For User",
        "description": "Refresh number registration for user\n\nIf a registration fails, this will turn the number\nregistration off and back on",
        "operationId": "refresh_number_registration_for_user_api_v1_a2p_refresh_number_registration__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Refresh Number Registration For User Api V1 A2P Refresh Number Registration  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/a2p/update-number-registration-status/{userId}": {
      "post": {
        "tags": ["a2p"],
        "summary": "Update Number Registration Status For User",
        "description": "Update number registration status for user",
        "operationId": "update_number_registration_status_for_user_api_v1_a2p_update_number_registration_status__userId__post",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Userid" }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Status" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Update Number Registration Status For User Api V1 A2P Update Number Registration Status  Userid  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/whale/setup-profile": {
      "post": {
        "tags": ["whale"],
        "summary": "Setup Profile",
        "description": "Setup profile",
        "operationId": "setup_profile_api_v1_whale_setup_profile_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WhaleUserSignupCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Profile Api V1 Whale Setup Profile Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/whale/setup-phone": {
      "post": {
        "tags": ["whale"],
        "summary": "Setup Phone",
        "description": "Setup phone",
        "operationId": "setup_phone_api_v1_whale_setup_phone_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WhaleUserSignupPhone" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Phone Api V1 Whale Setup Phone Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/whale/setup-archiver": {
      "post": {
        "tags": ["whale"],
        "summary": "Setup Archiver",
        "description": "Setup archiver",
        "operationId": "setup_archiver_api_v1_whale_setup_archiver_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WhaleUserSetupArchiver"
                },
                "title": "Archivers In"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Archiver Api V1 Whale Setup Archiver Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/whale/wire-call-forwarding": {
      "post": {
        "tags": ["whale"],
        "summary": "Setup Call Forwarding",
        "description": "Setup call forwarding",
        "operationId": "setup_call_forwarding_api_v1_whale_wire_call_forwarding_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhaleUserCallForwarding"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Call Forwarding Api V1 Whale Wire Call Forwarding Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/whale/wire-compliance-message": {
      "post": {
        "tags": ["whale"],
        "summary": "Setup Compliance Message",
        "description": "Setup compliance message",
        "operationId": "setup_compliance_message_api_v1_whale_wire_compliance_message_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Owner Id",
              "description": "Admin Only: Id for the owner of the user"
            },
            "description": "Admin Only: Id for the owner of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhaleUserComplianceMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Setup Compliance Message Api V1 Whale Wire Compliance Message Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/oauth/connect": {
      "post": {
        "tags": ["oauth"],
        "summary": "Connect",
        "description": "OAuth Callback Endpoint",
        "operationId": "connect_api_v1_oauth_connect_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExchangeRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Connector" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/oauth/initiate": {
      "post": {
        "tags": ["oauth"],
        "summary": "Initiate",
        "description": "Create an OAuth connection",
        "operationId": "initiate_api_v1_oauth_initiate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConnectionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConnectionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/workspaces/": {
      "get": {
        "tags": ["workspaces"],
        "summary": "Read Workspaces",
        "description": "Get workspaces for an organization",
        "operationId": "read_workspaces_api_v1_workspaces__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Organization Id",
              "description": "Organization Id to get data for"
            },
            "description": "Organization Id to get data for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserProfile" },
                  "title": "Response Read Workspaces Api V1 Workspaces  Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["workspaces"],
        "summary": "Create Workspace",
        "description": "Create workspace for an organization",
        "operationId": "create_workspace_api_v1_workspaces__post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WorkspaceCreateIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfile" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{id}": {
      "get": {
        "tags": ["workspaces"],
        "summary": "Read Workspace",
        "description": "Get workspace record",
        "operationId": "read_workspace_api_v1_workspaces__id__get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileInDBAdmin"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["workspaces"],
        "summary": "Update Workspace",
        "description": "Update user profile record",
        "operationId": "update_workspace_api_v1_workspaces__id__put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdate-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{id}/billing": {
      "put": {
        "tags": ["workspaces"],
        "summary": "Update Workspace Billing",
        "description": "Update user profile billing record",
        "operationId": "update_workspace_billing_api_v1_workspaces__id__billing_put",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceBillingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileUpdate-Output"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{id}/users": {
      "get": {
        "tags": ["workspaces"],
        "summary": "Read Workspace Users",
        "description": "Get workspace users",
        "operationId": "read_workspace_users_api_v1_workspaces__id__users_get",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TeamMember" },
                  "title": "Response Read Workspace Users Api V1 Workspaces  Id  Users Get"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{id}/invite": {
      "post": {
        "tags": ["workspaces"],
        "summary": "Invite User To Workspace",
        "description": "Invite user to workspace",
        "operationId": "invite_user_to_workspace_api_v1_workspaces__id__invite_post",
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Invite User To Workspace Api V1 Workspaces  Id  Invite Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/impersonate": {
      "post": {
        "tags": ["workspaces"],
        "summary": "Impersonate",
        "description": "Generate impersonation token",
        "operationId": "impersonate_api_v1_workspaces_impersonate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ImpersonateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Impersonate Api V1 Workspaces Impersonate Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/workspaces/switch": {
      "post": {
        "tags": ["workspaces"],
        "summary": "Switch Workspace",
        "description": "Switch workspace",
        "operationId": "switch_workspace_api_v1_workspaces_switch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Switch Workspace Api V1 Workspaces Switch Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/workspaces/leave": {
      "post": {
        "tags": ["workspaces"],
        "summary": "Leave Workspace",
        "description": "Leave workspace",
        "operationId": "leave_workspace_api_v1_workspaces_leave_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Leave Workspace Api V1 Workspaces Leave Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          }
        },
        "security": [{ "JWTBearer": [] }, { "JWTBearer": [] }]
      }
    },
    "/api/v1/public/voice/{voiceId}": {
      "get": {
        "tags": ["public"],
        "summary": "Read Public Voice",
        "description": "Get public voice",
        "operationId": "read_public_voice_api_v1_public_voice__voiceId__get",
        "parameters": [
          {
            "name": "voiceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Voiceid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PublicVoice" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/videos/{videoId}": {
      "get": {
        "tags": ["public"],
        "summary": "Read Public Video",
        "description": "Get public video",
        "operationId": "read_public_video_api_v1_public_videos__videoId__get",
        "parameters": [
          {
            "name": "videoId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Videoid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PublicVideo" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/video-views/": {
      "post": {
        "tags": ["public"],
        "summary": "Create Public Video View",
        "description": "Get public video",
        "operationId": "create_public_video_view_api_v1_public_video_views__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PublicVideoViewCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Public Video View Api V1 Public Video Views  Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/brand-urls/{shortId}": {
      "get": {
        "tags": ["public"],
        "summary": "Read Public Brandurl",
        "description": "Get public brand URL",
        "operationId": "read_public_brandurl_api_v1_public_brand_urls__shortId__get",
        "parameters": [
          {
            "name": "shortId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Shortid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BrandUrl" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/profile/signup": {
      "post": {
        "tags": ["public"],
        "summary": "Create Usersignup",
        "description": "Create user signup\n\nPost to this api after signup to create a user profile registered to the\nprovided user. This will check against cognito to make sure its a real signup.",
        "operationId": "create_usersignup_api_v1_public_profile_signup_post",
        "parameters": [
          {
            "name": "signupType",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Signup Type",
              "description": "Signup Type"
            },
            "description": "Signup Type"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserSignupCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Usersignup Api V1 Public Profile Signup Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/billing/stripe-webhook": {
      "post": {
        "tags": ["public"],
        "summary": "Post Stripe Webhook",
        "description": "Post stripe webhook\n\nHandle events from stripe and respond to the event type",
        "operationId": "post_stripe_webhook_api_v1_public_billing_stripe_webhook_post",
        "parameters": [
          {
            "name": "stripe-signature",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Stripe-Signature"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "object", "title": "Body In" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "type": "object" }, {}],
                  "title": "Response Post Stripe Webhook Api V1 Public Billing Stripe Webhook Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/team-members/join": {
      "post": {
        "tags": ["public"],
        "summary": "Join Teammembers",
        "description": "Confirm team member join invite",
        "operationId": "join_teammembers_api_v1_public_team_members_join_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicTeamMemberJoinInvite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicTeamMemberJoinInviteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/team-members/{id}": {
      "get": {
        "tags": ["public"],
        "summary": "Public Read Teammember Invite",
        "description": "Get teammember record",
        "operationId": "public_read_teammember_invite_api_v1_public_team_members__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicTeamMemberInvite"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/gen/get-video-url": {
      "post": {
        "tags": ["public"],
        "summary": "Post Get Video Url",
        "description": "Create short url for video",
        "operationId": "post_get_video_url_api_v1_public_gen_get_video_url_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GenerateVideoIn" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Post Get Video Url Api V1 Public Gen Get Video Url Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/webhooks/medicarepro/send-message": {
      "post": {
        "tags": ["public", "webhooks"],
        "summary": "Send Message",
        "description": "MedicarePro send message webhook\n\n\nArgs:\n\nMessageBody: Any text\nContactNumber: Should start with +1 for the country code\nSourceAutomationUrl: The URL of the automation that triggered the message\n\nResponse:\n\nA timestamp of the sent time for the message",
        "operationId": "send_message_api_v1_public_webhooks_medicarepro_send_message_post",
        "parameters": [
          {
            "name": "accessToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Access Token",
              "description": "Access token for the user"
            },
            "description": "Access token for the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicareProWebhookSendMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicareProWebhookSendMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/webhooks/hubspot/sync": {
      "post": {
        "tags": ["public", "webhooks"],
        "summary": "Webhook Hubspot Sync",
        "description": "Hubspot webhook endpoint\n\n[\n  {\n    \"appId\": 123,\n    \"eventId\": 100,\n    \"subscriptionId\": 3479426,\n    \"portalId\": 242563610,\n    \"occurredAt\": 1745006079116,\n    \"subscriptionType\": \"contact.propertyChange\",\n    \"attemptNumber\": 0,\n    \"objectId\": 123,\n    \"changeSource\": \"CRM\",\n    \"objectTypeId\": \"0-1\",\n    \"propertyName\": \"lifecyclestage\",\n    \"propertyValue\": \"sample-value\",\n    \"isSensitive\": false\n  }\n]\n\nArgs:\n    userId: The ID of the user\n    webhook_payload: The webhook payload from Hubspot (array of events)\n\nReturns:\n    A response indicating success or failure",
        "operationId": "webhook_hubspot_sync_api_v1_public_webhooks_hubspot_sync_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HubspotWebhookPayload"
                },
                "type": "array",
                "title": "Webhook Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HubspotWebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/public/webhooks/hubspot/actions/send-sms": {
      "post": {
        "tags": ["public", "webhooks"],
        "summary": "Webhook Hubspot Send Sms",
        "description": "Hubspot webhook action to send SMS",
        "operationId": "webhook_hubspot_send_sms_api_v1_public_webhooks_hubspot_actions_send_sms_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/HubspotActionPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HubspotWebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/organizations/": {
      "get": {
        "tags": ["admin"],
        "summary": "Admin Read Organizations",
        "description": "Get organization records",
        "operationId": "admin_read_organizations_api_v1_admin_organizations__get",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "integer", "maximum": 100, "minimum": 10 },
                { "type": "null" }
              ],
              "title": "Pagination Limit",
              "description": "Pagination page size",
              "default": 100
            },
            "description": "Pagination page size"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Pagination Cursor",
              "description": "Pagination cursor provided by previous paginated response"
            },
            "description": "Pagination cursor provided by previous paginated response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationsPaginated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/organizations/{id}": {
      "get": {
        "tags": ["admin"],
        "summary": "Admin Read Organization",
        "description": "Get organization record",
        "operationId": "admin_read_organization_api_v1_admin_organizations__id__get",
        "security": [{ "JWTBearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            }
          },
          "400": {
            "description": "Invalid user request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "A message for why the request is invalid"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": { "detail": "A message for why the server failed" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "Read Items",
        "description": "Health Check",
        "operationId": "read_items_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/sentry-test": {
      "get": {
        "summary": "Trigger Error",
        "operationId": "trigger_error_sentry_test_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionExecutionIndexIdentifier": {
        "properties": {
          "enrollmentId": { "type": "integer", "title": "Enrollmentid" },
          "actionExecutionIndex": {
            "type": "integer",
            "title": "Actionexecutionindex"
          }
        },
        "type": "object",
        "required": ["enrollmentId", "actionExecutionIndex"],
        "title": "ActionExecutionIndexIdentifier",
        "description": "Hubspot action execution index identifier model"
      },
      "ActiveSubscriptionFeatures": {
        "properties": {
          "IsVoiceActive": { "type": "boolean", "title": "Isvoiceactive" },
          "IsCallForwardActive": {
            "type": "boolean",
            "title": "Iscallforwardactive"
          },
          "IsTextDispatchActive": {
            "type": "boolean",
            "title": "Istextdispatchactive"
          },
          "IsTextBroadcastActive": {
            "type": "boolean",
            "title": "Istextbroadcastactive"
          },
          "IsTextConversationActive": {
            "type": "boolean",
            "title": "Istextconversationactive"
          },
          "IsTextScheduleActive": {
            "type": "boolean",
            "title": "Istextscheduleactive"
          },
          "IsTextAutoRepliesActive": {
            "type": "boolean",
            "title": "Istextautorepliesactive"
          },
          "IsTextAutoScheduledActive": {
            "type": "boolean",
            "title": "Istextautoscheduledactive"
          },
          "IsAllowedInternational": {
            "type": "boolean",
            "title": "Isallowedinternational"
          }
        },
        "type": "object",
        "required": [
          "IsVoiceActive",
          "IsCallForwardActive",
          "IsTextDispatchActive",
          "IsTextBroadcastActive",
          "IsTextConversationActive",
          "IsTextScheduleActive",
          "IsTextAutoRepliesActive",
          "IsTextAutoScheduledActive",
          "IsAllowedInternational"
        ],
        "title": "ActiveSubscriptionFeatures",
        "description": "ActiveSubscriptionFeatures\n\nReturn if the user has active subscriptions for prices"
      },
      "AgentCoreListTypeEnum": {
        "type": "string",
        "enum": ["STATES"],
        "const": "STATES",
        "title": "AgentCoreListTypeEnum",
        "description": "AgentCore list type"
      },
      "AgentCoreProperty": {
        "properties": {
          "FieldType": { "type": "string", "title": "Fieldtype" },
          "Label": { "type": "string", "title": "Label" },
          "Name": { "type": "string", "title": "Name" },
          "FilterValues": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtervalues",
            "default": []
          }
        },
        "type": "object",
        "required": ["FieldType", "Label", "Name"],
        "title": "AgentCoreProperty",
        "description": "Meta for AgentCore api property"
      },
      "AutomationRule": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "DateType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Datetype"
          },
          "ContactFieldId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactfieldid"
          },
          "SendDateType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleSendDateTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendTriggerType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleTriggerTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendDateTypeWeekend": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleSendDateTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendDateDegree": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Senddatedegree"
          },
          "SendDateDegreeUnit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleSendDateDegreeUnitEnum"
              },
              { "type": "null" }
            ]
          },
          "SendAtTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sendattime"
          },
          "ScheduleDaysBefore": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledaysbefore"
          },
          "AudienceType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audiencetype"
          },
          "TagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tagids"
          },
          "OrTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Ortagids"
          },
          "NotTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Nottagids"
          },
          "SegmentId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Segmentid"
          },
          "HouseholdType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleHouseholdTypeEnum"
              },
              { "type": "null" }
            ]
          },
          "AdditionalPeopleType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleAdditionalPeopleTypeEnum"
              },
              { "type": "null" }
            ]
          },
          "AdditionalNumbers": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Additionalnumbers"
          },
          "IsSms": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issms"
          },
          "MessageBody": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebody"
          },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "MessageBodyWeekend": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebodyweekend"
          },
          "TuneType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleTuneTypeEnum" },
              { "type": "null" }
            ]
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "EmailsTo": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Emailsto"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "AutomationRuleId": { "type": "string", "title": "Automationruleid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": ["Title", "UserId", "AutomationRuleId", "CreatedAt"],
        "title": "AutomationRule",
        "description": "AutomationRule\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "AutomationRuleAdditionalPeopleTypeEnum": {
        "type": "string",
        "enum": ["YES", "NO"],
        "title": "AutomationRuleAdditionalPeopleTypeEnum",
        "description": "Additional people types"
      },
      "AutomationRuleCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "DateType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Datetype"
          },
          "ContactFieldId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactfieldid"
          },
          "SendDateType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleSendDateTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendTriggerType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleTriggerTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendDateTypeWeekend": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleSendDateTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendDateDegree": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Senddatedegree"
          },
          "SendDateDegreeUnit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleSendDateDegreeUnitEnum"
              },
              { "type": "null" }
            ]
          },
          "SendAtTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sendattime"
          },
          "ScheduleDaysBefore": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledaysbefore"
          },
          "AudienceType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audiencetype"
          },
          "TagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tagids"
          },
          "OrTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Ortagids"
          },
          "NotTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Nottagids"
          },
          "SegmentId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Segmentid"
          },
          "HouseholdType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleHouseholdTypeEnum"
              },
              { "type": "null" }
            ]
          },
          "AdditionalPeopleType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleAdditionalPeopleTypeEnum"
              },
              { "type": "null" }
            ]
          },
          "AdditionalNumbers": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Additionalnumbers"
          },
          "IsSms": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issms"
          },
          "MessageBody": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebody"
          },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "MessageBodyWeekend": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebodyweekend"
          },
          "TuneType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleTuneTypeEnum" },
              { "type": "null" }
            ]
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "EmailsTo": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Emailsto"
          }
        },
        "type": "object",
        "required": ["Title"],
        "title": "AutomationRuleCreate",
        "description": "Create\n\nProperties to receive on automationrule creation"
      },
      "AutomationRuleHouseholdTypeEnum": {
        "type": "string",
        "enum": ["ALL", "SPOUSE", "SKIP"],
        "title": "AutomationRuleHouseholdTypeEnum",
        "description": "Household types"
      },
      "AutomationRuleSendDateDegreeUnitEnum": {
        "type": "string",
        "enum": ["DAY", "YEAR"],
        "title": "AutomationRuleSendDateDegreeUnitEnum",
        "description": "Send date degree units"
      },
      "AutomationRuleSendDateTypeEnum": {
        "type": "string",
        "enum": ["ON", "BEFORE", "AFTER"],
        "title": "AutomationRuleSendDateTypeEnum",
        "description": "SendDate types"
      },
      "AutomationRuleTriggerTypeEnum": {
        "type": "string",
        "enum": ["RECURRING", "ONETIME"],
        "title": "AutomationRuleTriggerTypeEnum",
        "description": "Send trigger type"
      },
      "AutomationRuleTuneTypeEnum": {
        "type": "string",
        "enum": ["AI", "STATIC"],
        "title": "AutomationRuleTuneTypeEnum",
        "description": "Tune types"
      },
      "AutomationRuleUpdate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "DateType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Datetype"
          },
          "ContactFieldId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactfieldid"
          },
          "SendDateType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleSendDateTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendTriggerType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleTriggerTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendDateTypeWeekend": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleSendDateTypeEnum" },
              { "type": "null" }
            ]
          },
          "SendDateDegree": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Senddatedegree"
          },
          "SendDateDegreeUnit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleSendDateDegreeUnitEnum"
              },
              { "type": "null" }
            ]
          },
          "SendAtTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sendattime"
          },
          "ScheduleDaysBefore": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledaysbefore"
          },
          "AudienceType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audiencetype"
          },
          "TagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tagids"
          },
          "OrTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Ortagids"
          },
          "NotTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Nottagids"
          },
          "SegmentId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Segmentid"
          },
          "HouseholdType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleHouseholdTypeEnum"
              },
              { "type": "null" }
            ]
          },
          "AdditionalPeopleType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutomationRuleAdditionalPeopleTypeEnum"
              },
              { "type": "null" }
            ]
          },
          "AdditionalNumbers": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Additionalnumbers"
          },
          "IsSms": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issms"
          },
          "MessageBody": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebody"
          },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "MessageBodyWeekend": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebodyweekend"
          },
          "TuneType": {
            "anyOf": [
              { "$ref": "#/components/schemas/AutomationRuleTuneTypeEnum" },
              { "type": "null" }
            ]
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "EmailsTo": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Emailsto"
          }
        },
        "type": "object",
        "title": "AutomationRuleUpdate",
        "description": "Update\n\nProperties to receive on automationrule update"
      },
      "AutomationRulesPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/AutomationRule" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "AutomationRulesPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "BankQuestion": {
        "properties": {
          "BankQuestionType": {
            "$ref": "#/components/schemas/BankQuestionTypeEnum"
          },
          "QuestionTitle": { "type": "string", "title": "Questiontitle" },
          "QuestionDescription": {
            "type": "string",
            "title": "Questiondescription"
          },
          "IsIncludeQuestionDescription": {
            "type": "boolean",
            "title": "Isincludequestiondescription"
          },
          "Probes": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/BankQuestionProbe" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Probes"
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          },
          "IsLockTitle": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islocktitle",
            "default": false
          },
          "IsLockDescription": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islockdescription",
            "default": false
          },
          "IsAllowRemoveProbes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowremoveprobes",
            "default": true
          },
          "IsAllowAddProbes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaddprobes",
            "default": true
          },
          "UserId": { "type": "string", "title": "Userid" },
          "BankQuestionId": { "type": "string", "title": "Bankquestionid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "CreatedByUserId": { "type": "string", "title": "Createdbyuserid" },
          "CreatedByUserBrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Createdbyuserbrandimageurl"
          },
          "CreatedByUserName": {
            "type": "string",
            "title": "Createdbyusername"
          }
        },
        "type": "object",
        "required": [
          "BankQuestionType",
          "QuestionTitle",
          "QuestionDescription",
          "IsIncludeQuestionDescription",
          "UserId",
          "BankQuestionId",
          "CreatedTime",
          "CreatedByUserId",
          "CreatedByUserName"
        ],
        "title": "BankQuestion",
        "description": "BankQuestion\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "BankQuestionCreate": {
        "properties": {
          "BankQuestionType": {
            "$ref": "#/components/schemas/BankQuestionTypeEnum"
          },
          "QuestionTitle": { "type": "string", "title": "Questiontitle" },
          "QuestionDescription": {
            "type": "string",
            "title": "Questiondescription"
          },
          "IsIncludeQuestionDescription": {
            "type": "boolean",
            "title": "Isincludequestiondescription"
          },
          "Probes": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/BankQuestionProbe" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Probes"
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          },
          "IsLockTitle": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islocktitle",
            "default": false
          },
          "IsLockDescription": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islockdescription",
            "default": false
          },
          "IsAllowRemoveProbes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowremoveprobes",
            "default": true
          },
          "IsAllowAddProbes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaddprobes",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "BankQuestionType",
          "QuestionTitle",
          "QuestionDescription",
          "IsIncludeQuestionDescription"
        ],
        "title": "BankQuestionCreate",
        "description": "Create\n\nProperties to receive on bankquestion creation"
      },
      "BankQuestionProbe": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "IsLockName": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islockname",
            "default": false
          },
          "IsAllowRemoveProbe": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowremoveprobe",
            "default": true
          }
        },
        "type": "object",
        "required": ["Name"],
        "title": "BankQuestionProbe",
        "description": "BankQuestionProbe\n\nA probe tied to mutli select question"
      },
      "BankQuestionTypeEnum": {
        "type": "string",
        "enum": ["TEXT_SHORT", "TEXT_LONG", "MULTI_SELECT", "RADIO_SELECT"],
        "title": "BankQuestionTypeEnum",
        "description": "Template question types"
      },
      "BankQuestionUpdate": {
        "properties": {
          "BankQuestionType": {
            "anyOf": [
              { "$ref": "#/components/schemas/BankQuestionTypeEnum" },
              { "type": "null" }
            ]
          },
          "QuestionTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Questiontitle"
          },
          "QuestionDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Questiondescription"
          },
          "IsIncludeQuestionDescription": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isincludequestiondescription"
          },
          "Probes": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/BankQuestionProbe" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Probes"
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          },
          "IsLockTitle": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islocktitle",
            "default": false
          },
          "IsLockDescription": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islockdescription",
            "default": false
          },
          "IsAllowRemoveProbes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowremoveprobes",
            "default": true
          },
          "IsAllowAddProbes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaddprobes",
            "default": true
          }
        },
        "type": "object",
        "title": "BankQuestionUpdate",
        "description": "Update\n\nProperties to receive on bankquestion update"
      },
      "Billing": {
        "properties": {
          "StripeCustomerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripecustomerid"
          },
          "BillingType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingtype"
          },
          "SubscriptionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Subscriptionid"
          },
          "ProductName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Productname"
          },
          "ProductDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Productdescription"
          },
          "BundleNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Bundlenames"
          },
          "AddonNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonnames"
          },
          "PriceIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Priceids"
          },
          "SubscriptionStatus": {
            "anyOf": [
              { "$ref": "#/components/schemas/StripeSubscriptionStatusEnum" },
              { "type": "null" }
            ]
          },
          "CreatedTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Createdtime"
          },
          "CurrentPeriodStartTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Currentperiodstarttime"
          },
          "CurrentPeriodEndTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Currentperiodendtime"
          },
          "CanceledAtTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Canceledattime"
          },
          "CancelAtTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Cancelattime"
          }
        },
        "type": "object",
        "title": "Billing",
        "description": "Billing\n\nBilling provides fields for the billing record."
      },
      "BillingConfig": {
        "properties": {
          "Products": { "type": "object", "title": "Products" },
          "Registration": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProductData" },
              { "type": "null" }
            ]
          },
          "CallForwarding": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProductData" },
              { "type": "null" }
            ]
          },
          "Prices": { "type": "object", "title": "Prices" },
          "UpdatedAt": { "type": "string", "title": "Updatedat" }
        },
        "type": "object",
        "required": ["Products", "Prices", "UpdatedAt"],
        "title": "BillingConfig",
        "description": "BillingConfig\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "BillingConfigCreate": {
        "properties": {
          "Products": { "type": "object", "title": "Products" },
          "Registration": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProductData" },
              { "type": "null" }
            ]
          },
          "CallForwarding": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProductData" },
              { "type": "null" }
            ]
          },
          "Prices": { "type": "object", "title": "Prices" }
        },
        "type": "object",
        "required": ["Products", "Prices"],
        "title": "BillingConfigCreate",
        "description": "Create\n\nProperties to receive on billingconfig creation"
      },
      "BillingConfigUpdate": {
        "properties": {
          "Products": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Products"
          },
          "Registration": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProductData" },
              { "type": "null" }
            ]
          },
          "CallForwarding": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProductData" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "BillingConfigUpdate",
        "description": "Update\n\nProperties to receive on billingconfig update"
      },
      "BillingInDB": {
        "properties": {
          "StripeCustomerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripecustomerid"
          },
          "BillingType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingtype"
          },
          "SubscriptionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Subscriptionid"
          },
          "ProductName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Productname"
          },
          "ProductDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Productdescription"
          },
          "BundleNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Bundlenames"
          },
          "AddonNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonnames"
          },
          "PriceIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Priceids"
          },
          "SubscriptionStatus": {
            "anyOf": [
              { "$ref": "#/components/schemas/StripeSubscriptionStatusEnum" },
              { "type": "null" }
            ]
          },
          "CreatedTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Createdtime"
          },
          "CurrentPeriodStartTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Currentperiodstarttime"
          },
          "CurrentPeriodEndTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Currentperiodendtime"
          },
          "CanceledAtTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Canceledattime"
          },
          "CancelAtTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Cancelattime"
          },
          "Meta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Meta"
          },
          "ProductLookupId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Productlookupid"
          },
          "BundlesLookupIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Bundleslookupids"
          },
          "AddonsLookupIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonslookupids"
          }
        },
        "type": "object",
        "title": "BillingInDB",
        "description": "Billing\n\nSome more info not needed on ui"
      },
      "BillingPaymentMethod": {
        "properties": {
          "type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Type"
          },
          "created": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Created"
          },
          "card": {
            "anyOf": [
              { "$ref": "#/components/schemas/BillingPaymentMethodCard" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "BillingPaymentMethod",
        "description": "BillingPaymentMethod\n\nPayment method object"
      },
      "BillingPaymentMethodCard": {
        "properties": {
          "brand": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brand"
          },
          "exp_month": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Exp Month"
          },
          "exp_year": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Exp Year"
          },
          "last4": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last4"
          }
        },
        "type": "object",
        "title": "BillingPaymentMethodCard",
        "description": "BillingPaymentMethodCard"
      },
      "BillingPlans": {
        "properties": {
          "Products": { "type": "object", "title": "Products" },
          "UpdatedAt": { "type": "string", "title": "Updatedat" }
        },
        "type": "object",
        "required": ["Products", "UpdatedAt"],
        "title": "BillingPlans",
        "description": "BillingPlans\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "BillingPortalConfiguration": {
        "properties": {
          "ReturnUrl": { "type": "string", "title": "Returnurl" },
          "IsPaymentMethodPortal": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispaymentmethodportal",
            "default": false
          },
          "IsInvoiceHistoryPortal": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isinvoicehistoryportal",
            "default": false
          }
        },
        "type": "object",
        "required": ["ReturnUrl"],
        "title": "BillingPortalConfiguration",
        "description": "BillingPortalConfiguration\n\nFeature for biling portal"
      },
      "Body_add_item_api_v1_routingbuckets_fill_post": {
        "properties": {
          "item": { "$ref": "#/components/schemas/RoutingBucketFillItem" },
          "rule": { "$ref": "#/components/schemas/RoutingRule-Input" }
        },
        "type": "object",
        "required": ["item", "rule"],
        "title": "Body_add_item_api_v1_routingbuckets_fill_post"
      },
      "Body_create_organization_subscription_api_v1_organizations_create_checkout_session_post": {
        "properties": {
          "success_url": { "type": "string", "title": "Success Url" },
          "cancel_url": { "type": "string", "title": "Cancel Url" }
        },
        "type": "object",
        "required": ["success_url", "cancel_url"],
        "title": "Body_create_organization_subscription_api_v1_organizations_create_checkout_session_post"
      },
      "Body_create_upload_usermedia_api_v1_usermedia__post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_create_upload_usermedia_api_v1_usermedia__post"
      },
      "Body_post_create_checkout_session_api_v1_billing_create_checkout_session_post": {
        "properties": {
          "product_lookup_id": {
            "type": "string",
            "title": "Product Lookup Id"
          },
          "product_bundle_ids": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Product Bundle Ids"
          },
          "success_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Success Url"
          },
          "cancel_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cancel Url"
          },
          "is_add_call_forwarding": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Add Call Forwarding",
            "default": false
          }
        },
        "type": "object",
        "required": ["product_lookup_id", "success_url", "cancel_url"],
        "title": "Body_post_create_checkout_session_api_v1_billing_create_checkout_session_post"
      },
      "Body_register_number_api_v1_profile_register_number_post": {
        "properties": {
          "number_in": {
            "type": "string",
            "title": "Phone number",
            "description": "Phone number with a leading +1"
          }
        },
        "type": "object",
        "title": "Body_register_number_api_v1_profile_register_number_post"
      },
      "Body_upload_audio_file_api_v1_useraudios_upload_audio_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_audio_file_api_v1_useraudios_upload_audio_post"
      },
      "Body_upload_audio_file_api_v1_voice_upload_audio_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_audio_file_api_v1_voice_upload_audio_post"
      },
      "Body_upload_billing_statement_api_v1_portrequest_upload_billing_statement_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_billing_statement_api_v1_portrequest_upload_billing_statement_post"
      },
      "Body_upload_brand_image_api_v1_brand_upload_brand_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_brand_image_api_v1_brand_upload_brand_post"
      },
      "Body_upload_organization_brand_image_api_v1_organizations_upload_brand_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_organization_brand_image_api_v1_organizations_upload_brand_post"
      },
      "Body_upload_privacy_policy_api_v1_profile_legal_upload_privacy_policy_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_privacy_policy_api_v1_profile_legal_upload_privacy_policy_post"
      },
      "Body_upload_profile_branding_image_api_v1_profile_uploadbranding_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_profile_branding_image_api_v1_profile_uploadbranding_post"
      },
      "Body_upload_teammember_branding_image_api_v1_team_members__id__uploadbranding_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_teammember_branding_image_api_v1_team_members__id__uploadbranding_post"
      },
      "Body_upload_vcard_image_api_v1_vcards_upload_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_vcard_image_api_v1_vcards_upload_post"
      },
      "Body_upload_video_author_image_api_v1_videos__id__upload_author_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_video_author_image_api_v1_videos__id__upload_author_post"
      },
      "Body_upload_video_brand_image_api_v1_videos__id__upload_brand_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_video_brand_image_api_v1_videos__id__upload_brand_post"
      },
      "Body_upload_video_favicon_image_api_v1_videos__id__upload_favicon_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_video_favicon_image_api_v1_videos__id__upload_favicon_post"
      },
      "Brand": {
        "properties": {
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "VoiceMemoThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Voicememothumbnailurl"
          },
          "VideoThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Videothumbnailurl"
          },
          "StylePrimaryBgColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimarybgcolor"
          },
          "StylePrimaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryfontcolor"
          },
          "StyleSecondaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryfontcolor"
          },
          "StyleLegalFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylelegalfontcolor"
          },
          "StyleActionBannerBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleactionbannerbg"
          },
          "StylePrimaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactionbg"
          },
          "StylePrimaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactioncolor"
          },
          "StyleSecondaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactionbg"
          },
          "StyleSecondaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactioncolor"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "BrandId": { "type": "string", "title": "Brandid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["UserId", "BrandId", "CreatedTime"],
        "title": "Brand",
        "description": "Brand\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "BrandDomain": {
        "properties": {
          "DomainName": { "type": "string", "title": "Domainname" },
          "IsVerified": { "type": "boolean", "title": "Isverified" },
          "IsConfigured": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isconfigured",
            "default": false
          },
          "LastCheckedTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Lastcheckedtime"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "BrandDomainId": { "type": "string", "title": "Branddomainid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedTime": { "type": "integer", "title": "Createdtime" }
        },
        "type": "object",
        "required": [
          "DomainName",
          "IsVerified",
          "UserId",
          "BrandDomainId",
          "CreatedTime"
        ],
        "title": "BrandDomain",
        "description": "BrandDomain\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "BrandDomainCreate": {
        "properties": {
          "DomainName": { "type": "string", "title": "Domainname" },
          "IsVerified": { "type": "boolean", "title": "Isverified" },
          "IsConfigured": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isconfigured",
            "default": false
          },
          "LastCheckedTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Lastcheckedtime"
          }
        },
        "type": "object",
        "required": ["DomainName", "IsVerified"],
        "title": "BrandDomainCreate",
        "description": "Create\n\nProperties to receive on branddomain creation"
      },
      "BrandDomainUpdate": {
        "properties": {
          "DomainName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domainname"
          },
          "IsVerified": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isverified",
            "default": false
          },
          "IsConfigured": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isconfigured",
            "default": false
          },
          "LastCheckedTime": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Lastcheckedtime"
          }
        },
        "type": "object",
        "title": "BrandDomainUpdate",
        "description": "Update\n\nProperties to receive on branddomain update"
      },
      "BrandDomainsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/BrandDomain" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "BrandDomainsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "BrandUpdate": {
        "properties": {
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "VoiceMemoThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Voicememothumbnailurl"
          },
          "VideoThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Videothumbnailurl"
          },
          "StylePrimaryBgColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimarybgcolor"
          },
          "StylePrimaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryfontcolor"
          },
          "StyleSecondaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryfontcolor"
          },
          "StyleLegalFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylelegalfontcolor"
          },
          "StyleActionBannerBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleactionbannerbg"
          },
          "StylePrimaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactionbg"
          },
          "StylePrimaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactioncolor"
          },
          "StyleSecondaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactionbg"
          },
          "StyleSecondaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactioncolor"
          }
        },
        "type": "object",
        "title": "BrandUpdate",
        "description": "Update\n\nProperties to receive on brand update"
      },
      "BrandUrl": {
        "properties": {
          "TargetUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Targeturl"
          },
          "DomainName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domainname"
          },
          "ShortId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shortid"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "BrandUrlId": { "type": "string", "title": "Brandurlid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["UserId", "BrandUrlId", "CreatedTime"],
        "title": "BrandUrl",
        "description": "BrandUrl"
      },
      "BrandUrlCreate": {
        "properties": {
          "TargetUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Targeturl"
          },
          "DomainName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domainname"
          },
          "ShortId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shortid"
          }
        },
        "type": "object",
        "title": "BrandUrlCreate",
        "description": "BrandUrlCreate"
      },
      "BrandUrlPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": { "items": {}, "type": "array", "title": "Records" },
          "Items": {
            "items": { "$ref": "#/components/schemas/BrandUrl" },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": ["records", "Items"],
        "title": "BrandUrlPaginated",
        "description": "BrandUrlPaginated"
      },
      "BrandUrlUpdate": {
        "properties": {
          "TargetUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Targeturl"
          },
          "DomainName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domainname"
          },
          "ShortId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shortid"
          }
        },
        "type": "object",
        "title": "BrandUrlUpdate",
        "description": "Update\n\nProperties to receive on branddomain update"
      },
      "BusinessTypesEnum": {
        "type": "string",
        "enum": [
          "SOLE_PROPRIETORSHIP",
          "PARTNERSHIP",
          "LIMITED_LIABILITY_CORPORATION",
          "COOPERATIVE",
          "NONPROFIT_CORPORATION",
          "CORPORATION"
        ],
        "title": "BusinessTypesEnum",
        "description": "Business Types Enum\nTypes of a business used for a2p registration"
      },
      "Cairn": {
        "properties": {
          "CairnId": { "type": "string", "title": "Cairnid" },
          "GroupOrder": { "type": "integer", "title": "Grouporder" },
          "GroupLabel": { "type": "string", "title": "Grouplabel" },
          "Order": { "type": "integer", "title": "Order" },
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "Tasks": {
            "items": { "$ref": "#/components/schemas/CairnTask" },
            "type": "array",
            "title": "Tasks",
            "default": []
          }
        },
        "type": "object",
        "required": ["CairnId", "GroupOrder", "GroupLabel", "Order", "Title"],
        "title": "Cairn",
        "description": "Cairn\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "CairnTask": {
        "properties": {
          "CairnTaskId": { "type": "string", "title": "Cairntaskid" },
          "JourneyKey": { "$ref": "#/components/schemas/JourneyKeys" },
          "Order": { "type": "integer", "title": "Order" },
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "PageLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Pagelink"
          },
          "PageLinkUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Pagelinkurl"
          },
          "VideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Videoid"
          },
          "VideoTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Videotitle"
          }
        },
        "type": "object",
        "required": ["CairnTaskId", "JourneyKey", "Order", "Title"],
        "title": "CairnTask",
        "description": "CairnTask"
      },
      "CairnsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/Cairn" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "CairnsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "CommunityTemplate": {
        "properties": {
          "TemplateId": { "type": "string", "title": "Templateid" },
          "Industry": { "type": "string", "title": "Industry" },
          "Topic": { "type": "string", "title": "Topic" },
          "Order": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Order"
          },
          "Title": { "type": "string", "title": "Title" },
          "Description": { "type": "string", "title": "Description" },
          "Message": { "type": "string", "title": "Message" }
        },
        "type": "object",
        "required": [
          "TemplateId",
          "Industry",
          "Topic",
          "Title",
          "Description",
          "Message"
        ],
        "title": "CommunityTemplate",
        "description": "CommunityTemplate\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "CommunityTemplatesPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/CommunityTemplate" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "CommunityTemplatesPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "CompanyTypesEnum": {
        "type": "string",
        "enum": ["PRIVATE", "PUBLIC", "NON_PROFIT", "GOVERNMENT"],
        "title": "CompanyTypesEnum",
        "description": "Company Types Enum\nTypes of a company used for a2p registration"
      },
      "ConnectionRequest": {
        "properties": {
          "Domain": { "type": "string", "title": "Domain" },
          "Provider": { "type": "string", "title": "Provider" },
          "Redirect": { "type": "string", "title": "Redirect" },
          "Meta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Meta"
          }
        },
        "type": "object",
        "required": ["Domain", "Provider", "Redirect"],
        "title": "ConnectionRequest",
        "description": "Connection Request\n\nA request to connect a new OAuth provider"
      },
      "ConnectionResponse": {
        "properties": { "Url": { "type": "string", "title": "Url" } },
        "type": "object",
        "required": ["Url"],
        "title": "ConnectionResponse",
        "description": "Connection Response\n\nThe successful response from a connection request"
      },
      "Connector": {
        "properties": {
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorType": { "type": "string", "title": "Connectortype" },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm"
          },
          "Meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Meta"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": [
          "ConnectorName",
          "ConnectorType",
          "Meta",
          "UserId",
          "ConnectorId",
          "CreatedAt"
        ],
        "title": "Connector",
        "description": "Connector\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "ConnectorContactCreateInHubspot": {
        "properties": {
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": { "type": "string", "title": "Phone" },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "IsHubspot": { "type": "boolean", "title": "Ishubspot" }
        },
        "type": "object",
        "required": ["FirstName", "LastName", "Phone", "IsHubspot"],
        "title": "ConnectorContactCreateInHubspot",
        "description": "Hubspot create contact"
      },
      "ConnectorContactCreateInMedicarePro": {
        "properties": {
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": { "type": "string", "title": "Phone" },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "IsMedicarePro": { "type": "boolean", "title": "Ismedicarepro" },
          "ContactStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactstatus"
          }
        },
        "type": "object",
        "required": ["FirstName", "LastName", "Phone", "IsMedicarePro"],
        "title": "ConnectorContactCreateInMedicarePro",
        "description": "MedicarePro create contact"
      },
      "ConnectorContactCreateInQuivr": {
        "properties": {
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": { "type": "string", "title": "Phone" },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "Household": { "$ref": "#/components/schemas/Household" },
          "RecordTypeId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Recordtypeid"
          }
        },
        "type": "object",
        "required": ["FirstName", "LastName", "Phone", "Household"],
        "title": "ConnectorContactCreateInQuivr",
        "description": "Quivr create contact"
      },
      "ConnectorContactCreateInRedtail": {
        "properties": {
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": { "type": "string", "title": "Phone" },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "IsRedtail": { "type": "boolean", "title": "Isredtail" },
          "ContactStatusId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactstatusid"
          },
          "ContactSourceId": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Contactsourceid"
          },
          "ContactCategoryId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactcategoryid"
          }
        },
        "type": "object",
        "required": ["FirstName", "LastName", "Phone", "IsRedtail"],
        "title": "ConnectorContactCreateInRedtail",
        "description": "Redtail create contact"
      },
      "ConnectorContactCreateInWealthbox": {
        "properties": {
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": { "type": "string", "title": "Phone" },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "IsWealthbox": { "type": "boolean", "title": "Iswealthbox" },
          "ContactType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contacttype"
          },
          "ContactSource": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactsource"
          }
        },
        "type": "object",
        "required": ["FirstName", "LastName", "Phone", "IsWealthbox"],
        "title": "ConnectorContactCreateInWealthbox",
        "description": "Wealthbox create contact"
      },
      "ConnectorCreate": {
        "properties": {
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorType": { "type": "string", "title": "Connectortype" },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm"
          },
          "Meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Meta"
          }
        },
        "type": "object",
        "required": ["ConnectorName", "ConnectorType", "Meta"],
        "title": "ConnectorCreate",
        "description": "Create\n\nProperties to receive on connector creation"
      },
      "ConnectorCrmContact": {
        "properties": {
          "SourceId": {
            "anyOf": [{ "type": "string" }, { "type": "integer" }],
            "title": "Sourceid"
          },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "AvatarUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Avatarurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          }
        },
        "type": "object",
        "required": ["SourceId"],
        "title": "ConnectorCrmContact",
        "description": "ConnectorCrmContact\n\nBase crm contact props"
      },
      "ConnectorCrmEvent": {
        "properties": {
          "EventId": { "type": "string", "title": "Eventid" },
          "StartTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Starttime"
          },
          "AuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Authorname"
          },
          "Label": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Label"
          },
          "Location": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Location"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "Type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Type"
          },
          "Status": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Status"
          },
          "LinkUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Linkurl"
          }
        },
        "type": "object",
        "required": ["EventId"],
        "title": "ConnectorCrmEvent",
        "description": "ConnectorCrmEvent\n\nBase crm task props to keep common vals"
      },
      "ConnectorCrmTask": {
        "properties": {
          "AuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Authorname"
          },
          "TaskId": { "type": "string", "title": "Taskid" },
          "TaskName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskname"
          },
          "TaskDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskdescription"
          },
          "TaskDescriptionHtml": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskdescriptionhtml"
          },
          "TaskDueTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskduetime"
          },
          "IsTaskComplete": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Istaskcomplete"
          },
          "IsTaskPastDue": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Istaskpastdue"
          },
          "TaskPriority": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskpriority"
          },
          "TaskVisibleTo": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Taskvisibleto"
          },
          "TaskLinkUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Tasklinkurl"
          }
        },
        "type": "object",
        "required": ["TaskId"],
        "title": "ConnectorCrmTask",
        "description": "ConnectorCrmTask\n\nBase crm task props to keep common vals"
      },
      "ConnectorListTypeOption": {
        "properties": {
          "Label": { "type": "string", "title": "Label" },
          "Value": { "type": "string", "title": "Value" }
        },
        "type": "object",
        "required": ["Label", "Value"],
        "title": "ConnectorListTypeOption",
        "description": "List type option value"
      },
      "ConnectorMetaAgencyBloc": {
        "properties": {
          "ApiKey": { "type": "string", "title": "Apikey" },
          "AccountSid": { "type": "string", "title": "Accountsid" },
          "NumberOrderPreference": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Numberorderpreference"
          },
          "FilterContactTypes": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttypes"
          },
          "FilterContactStatuses": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontactstatuses"
          }
        },
        "type": "object",
        "required": ["ApiKey", "AccountSid"],
        "title": "ConnectorMetaAgencyBloc",
        "description": "Meta for MetaAgencyBloc channel"
      },
      "ConnectorMetaAgentCore": {
        "properties": {
          "AgentCoreApiKey": { "type": "string", "title": "Agentcoreapikey" },
          "AgentCoreFilterProperties": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AgentCoreProperty" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Agentcorefilterproperties"
          },
          "AgentCoreAgentNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Agentcoreagentnames",
            "default": []
          }
        },
        "type": "object",
        "required": ["AgentCoreApiKey"],
        "title": "ConnectorMetaAgentCore",
        "description": "Meta for AgentCore channel"
      },
      "ConnectorMetaAgentCoreApiListIn": {
        "properties": {
          "ApiKey": { "type": "string", "title": "Apikey" },
          "ListType": { "$ref": "#/components/schemas/AgentCoreListTypeEnum" }
        },
        "type": "object",
        "required": ["ApiKey", "ListType"],
        "title": "ConnectorMetaAgentCoreApiListIn",
        "description": "Meta for AgentCore api list request"
      },
      "ConnectorMetaAgentCoreApiListOut": {
        "properties": {
          "Property": { "type": "string", "title": "Property" },
          "Options": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Options"
          },
          "Label": { "type": "string", "title": "Label" },
          "FieldType": { "type": "string", "title": "Fieldtype" }
        },
        "type": "object",
        "required": ["Property", "Label", "FieldType"],
        "title": "ConnectorMetaAgentCoreApiListOut",
        "description": "Meta for AgentCore api key request"
      },
      "ConnectorMetaEmail": {
        "properties": {
          "EmailsCc": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Emailscc"
          },
          "EmailsTo": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Emailsto"
          }
        },
        "type": "object",
        "required": ["EmailsTo"],
        "title": "ConnectorMetaEmail",
        "description": "Meta for Email channel"
      },
      "ConnectorMetaGoogleDrive": {
        "properties": {
          "Domain": { "type": "string", "title": "Domain" },
          "EncryptedAccessToken": {
            "type": "string",
            "title": "Encryptedaccesstoken"
          },
          "EncryptedRefreshToken": {
            "type": "string",
            "title": "Encryptedrefreshtoken"
          },
          "DriveFolderName": { "type": "string", "title": "Drivefoldername" },
          "IsPushCallRecordings": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispushcallrecordings",
            "default": false
          },
          "IsPushVideos": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispushvideos",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "Domain",
          "EncryptedAccessToken",
          "EncryptedRefreshToken",
          "DriveFolderName"
        ],
        "title": "ConnectorMetaGoogleDrive",
        "description": "Meta for GoogleDrive channel"
      },
      "ConnectorMetaHubspotOAuth": {
        "properties": {
          "Domain": { "type": "string", "title": "Domain" },
          "EncryptedAccessToken": {
            "type": "string",
            "title": "Encryptedaccesstoken"
          },
          "EncryptedRefreshToken": {
            "type": "string",
            "title": "Encryptedrefreshtoken"
          },
          "HsAccountId": { "type": "string", "title": "Hsaccountid" },
          "ContactProperties": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/HubSpotProperty" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Contactproperties"
          }
        },
        "type": "object",
        "required": [
          "Domain",
          "EncryptedAccessToken",
          "EncryptedRefreshToken",
          "HsAccountId"
        ],
        "title": "ConnectorMetaHubspotOAuth",
        "description": "Meta Hubspot for OAuth channels"
      },
      "ConnectorMetaMedicarePro": {
        "properties": {
          "MedicareProApiKey": {
            "type": "string",
            "title": "Medicareproapikey"
          },
          "MedicareProFilterProperties": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MedicareProProperty" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Medicareprofilterproperties"
          }
        },
        "type": "object",
        "required": ["MedicareProApiKey"],
        "title": "ConnectorMetaMedicarePro",
        "description": "Meta for MedicarePro channel"
      },
      "ConnectorMetaMedicareProApiListIn": {
        "properties": {
          "ListType": { "$ref": "#/components/schemas/MedicareProListTypeEnum" }
        },
        "type": "object",
        "required": ["ListType"],
        "title": "ConnectorMetaMedicareProApiListIn",
        "description": "Meta for MedicarePro api list request"
      },
      "ConnectorMetaMedicareProApiListOut": {
        "properties": {
          "Property": { "type": "string", "title": "Property" },
          "Options": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Options"
          },
          "Label": { "type": "string", "title": "Label" },
          "FieldType": { "type": "string", "title": "Fieldtype" }
        },
        "type": "object",
        "required": ["Property", "Label", "FieldType"],
        "title": "ConnectorMetaMedicareProApiListOut",
        "description": "Meta for MedicarePro api key request"
      },
      "ConnectorMetaMobile": {
        "properties": {
          "ExpoPushToken": { "type": "string", "title": "Expopushtoken" },
          "DeviceId": { "type": "string", "title": "Deviceid" },
          "DeviceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Devicename"
          },
          "DeviceModel": { "type": "string", "title": "Devicemodel" },
          "DeviceBrand": { "type": "string", "title": "Devicebrand" },
          "PlatformOS": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Platformos"
          },
          "PlatformVersion": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Platformversion"
          }
        },
        "type": "object",
        "required": ["ExpoPushToken", "DeviceId", "DeviceModel", "DeviceBrand"],
        "title": "ConnectorMetaMobile",
        "description": "Meta for mobile channel"
      },
      "ConnectorMetaOAuth": {
        "properties": {
          "Domain": { "type": "string", "title": "Domain" },
          "EncryptedAccessToken": {
            "type": "string",
            "title": "Encryptedaccesstoken"
          },
          "EncryptedRefreshToken": {
            "type": "string",
            "title": "Encryptedrefreshtoken"
          }
        },
        "type": "object",
        "required": ["Domain", "EncryptedAccessToken", "EncryptedRefreshToken"],
        "title": "ConnectorMetaOAuth",
        "description": "Meta for OAuth channels"
      },
      "ConnectorMetaRadiusBob": {
        "properties": {
          "RadiusBobApiKey": { "type": "string", "title": "Radiusbobapikey" },
          "RadiusBobWebUrl": { "type": "string", "title": "Radiusbobweburl" },
          "RadiusBobRecordType": {
            "type": "string",
            "title": "Radiusbobrecordtype"
          },
          "RadiusBobFilterProperties": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AgentCoreProperty" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Radiusbobfilterproperties"
          }
        },
        "type": "object",
        "required": [
          "RadiusBobApiKey",
          "RadiusBobWebUrl",
          "RadiusBobRecordType"
        ],
        "title": "ConnectorMetaRadiusBob",
        "description": "Meta for RadiusBob channel"
      },
      "ConnectorMetaRadiusBobApiListIn": {
        "properties": {
          "ApiKey": { "type": "string", "title": "Apikey" },
          "ListType": { "$ref": "#/components/schemas/RadiusBobListTypeEnum" }
        },
        "type": "object",
        "required": ["ApiKey", "ListType"],
        "title": "ConnectorMetaRadiusBobApiListIn",
        "description": "Meta for RadiusBob api list request"
      },
      "ConnectorMetaRadiusBobApiListOut": {
        "properties": {
          "Property": { "type": "string", "title": "Property" },
          "Options": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Options"
          },
          "Label": { "type": "string", "title": "Label" },
          "FieldType": { "type": "string", "title": "Fieldtype" }
        },
        "type": "object",
        "required": ["Property", "Label", "FieldType"],
        "title": "ConnectorMetaRadiusBobApiListOut",
        "description": "Meta for RadiusBob api key request"
      },
      "ConnectorMetaRedtail": {
        "properties": {
          "UserKey": { "type": "string", "title": "Userkey" },
          "ContactStatusIds": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [{ "type": "string" }, { "type": "integer" }]
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Contactstatusids"
          },
          "FilterContactTypeIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttypeids"
          },
          "FilterContactTypeNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttypenames"
          },
          "FilterServicingAdvisorIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filterservicingadvisorids"
          },
          "FilterServicingAdvisorNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filterservicingadvisornames"
          }
        },
        "type": "object",
        "required": ["UserKey"],
        "title": "ConnectorMetaRedtail",
        "description": "Meta for Redtail channel"
      },
      "ConnectorMetaRedtailApiListIn": {
        "properties": {
          "Userkey": { "type": "string", "title": "Userkey" },
          "ListType": { "type": "string", "title": "Listtype" }
        },
        "type": "object",
        "required": ["Userkey", "ListType"],
        "title": "ConnectorMetaRedtailApiListIn",
        "description": "Meta for Redtail api key request"
      },
      "ConnectorMetaRedtailApiTokenIn": {
        "properties": {
          "Username": { "type": "string", "title": "Username" },
          "Password": { "type": "string", "title": "Password" }
        },
        "type": "object",
        "required": ["Username", "Password"],
        "title": "ConnectorMetaRedtailApiTokenIn",
        "description": "Meta for Redtail api key request"
      },
      "ConnectorMetaSMS": {
        "properties": { "SmsTo": { "type": "string", "title": "Smsto" } },
        "type": "object",
        "required": ["SmsTo"],
        "title": "ConnectorMetaSMS",
        "description": "Meta for SMS channel"
      },
      "ConnectorMetaSlackOauth": {
        "properties": {
          "Domain": { "type": "string", "title": "Domain" },
          "EncryptedAccessToken": {
            "type": "string",
            "title": "Encryptedaccesstoken"
          },
          "EncryptedRefreshToken": {
            "type": "string",
            "title": "Encryptedrefreshtoken"
          },
          "SlackWebhookUrl": { "type": "string", "title": "Slackwebhookurl" },
          "ChannelName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Channelname"
          },
          "IsPushNewMessage": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispushnewmessage",
            "default": false
          },
          "IsPushNewVoicemail": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispushnewvoicemail",
            "default": false
          },
          "IsPushNewCallRecording": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispushnewcallrecording",
            "default": false
          },
          "IsPushMissedCall": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispushmissedcall",
            "default": false
          },
          "IsArchive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isarchive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "Domain",
          "EncryptedAccessToken",
          "EncryptedRefreshToken",
          "SlackWebhookUrl"
        ],
        "title": "ConnectorMetaSlackOauth",
        "description": "Meta for Slack channel"
      },
      "ConnectorMetaWealthBox": {
        "properties": {
          "ApiKey": { "type": "string", "title": "Apikey" },
          "ContactType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contacttype"
          },
          "FilterContactTypeIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttypeids"
          },
          "FilterContactTypeNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttypenames"
          },
          "FilterContactTagIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttagids"
          },
          "FilterContactTagNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtercontacttagnames"
          },
          "FilterAdvisorIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filteradvisorids"
          },
          "FilterAdvisorNames": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filteradvisornames"
          },
          "IsIncludeInactive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isincludeinactive"
          },
          "IsIncludeCompany": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isincludecompany"
          },
          "IsIncludeTrust": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isincludetrust"
          }
        },
        "type": "object",
        "required": ["ApiKey"],
        "title": "ConnectorMetaWealthBox",
        "description": "Meta for WealthBox channel"
      },
      "ConnectorMetaWealthBoxApiListIn": {
        "properties": {
          "ApiKey": { "type": "string", "title": "Apikey" },
          "ListType": { "type": "string", "title": "Listtype" }
        },
        "type": "object",
        "required": ["ApiKey", "ListType"],
        "title": "ConnectorMetaWealthBoxApiListIn",
        "description": "Meta for WealthBox api key request"
      },
      "ConnectorMetaWebhooks": {
        "properties": { "Url": { "type": "string", "title": "Url" } },
        "type": "object",
        "required": ["Url"],
        "title": "ConnectorMetaWebhooks",
        "description": "Meta for Webhooks"
      },
      "ConnectorNoteCreateIn": {
        "properties": {
          "Content": { "type": "string", "title": "Content" },
          "Contacts": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ConnectorTaskContactLinkCreateIn"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Contacts"
          },
          "Tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Tags"
          },
          "SourceConversationUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceconversationurl"
          }
        },
        "type": "object",
        "required": ["Content"],
        "title": "ConnectorNoteCreateIn",
        "description": "Data to create note in crm connector"
      },
      "ConnectorTaskContactLinkCreateIn": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "SourceId": {
            "anyOf": [{ "type": "string" }, { "type": "integer" }],
            "title": "Sourceid"
          }
        },
        "type": "object",
        "required": ["Name", "SourceId"],
        "title": "ConnectorTaskContactLinkCreateIn",
        "description": "Data to create task contact link in crm connector"
      },
      "ConnectorTaskCreateIn": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "Description": { "type": "string", "title": "Description" },
          "TaskType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Tasktype"
          },
          "Category": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Category"
          },
          "Priority": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Priority"
          },
          "DueTimestamp": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Duetimestamp"
          },
          "AssignedToUser": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Assignedtouser"
          },
          "AssignedToTeam": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Assignedtoteam"
          },
          "SourceContactId": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Sourcecontactid"
          },
          "SourceContactName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcecontactname"
          },
          "SourceContactEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcecontactemail"
          },
          "SourceConversationUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceconversationurl"
          }
        },
        "type": "object",
        "required": ["Name", "Description"],
        "title": "ConnectorTaskCreateIn",
        "description": "Data to create task in crm connector"
      },
      "ConnectorTypeEnum": {
        "type": "string",
        "enum": [
          "AGENCYBLOC",
          "AGENTCORE",
          "ARCHIVEINTEL",
          "CALENDLY",
          "EMAIL",
          "EMAILARCHIVE",
          "ERADO",
          "GLOBALRELAY",
          "GOOGLE",
          "GOOGLEDRIVE",
          "GREENBOARD",
          "RIACOMPTECH",
          "GREMINDERS",
          "HADRIUS",
          "HUBSPOT",
          "INTRADYN",
          "MEDICAREPRO",
          "MESSAGEWATCHER",
          "MICROSOFTOUTLOOK",
          "MIRRORWEB",
          "MOBILE",
          "MYRIACOMPLIANCE",
          "PATRINA",
          "PRESULTS",
          "PROOFPOINT",
          "QUIVR",
          "RADIUSBOB",
          "REDTAIL",
          "SALESFORCE",
          "SLACK",
          "SLACKARCHIVE",
          "SMARSH",
          "SMS",
          "WEALTHBOX",
          "WEBHOOK",
          "XLR8",
          "XYARCHIVE",
          "ZAPIER"
        ],
        "title": "ConnectorTypeEnum",
        "description": "Types of connectors"
      },
      "ConnectorUserUpdate-Input": {
        "properties": {
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "Meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Meta"
          }
        },
        "type": "object",
        "required": ["ConnectorName", "Meta"],
        "title": "ConnectorUserUpdate",
        "description": "Update\n\nProperties to receive on connector update from user land"
      },
      "ConnectorUserUpdate-Output": {
        "properties": {
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "Meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Meta"
          }
        },
        "type": "object",
        "required": ["ConnectorName", "Meta"],
        "title": "ConnectorUserUpdate",
        "description": "Update\n\nProperties to receive on connector update from user land"
      },
      "ConnectorWorkflowCreateIn": {
        "properties": {
          "WorkflowId": { "type": "string", "title": "Workflowid" },
          "Label": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Label"
          },
          "Contact": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConnectorTaskContactLinkCreateIn"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["WorkflowId"],
        "title": "ConnectorWorkflowCreateIn",
        "description": "Data to create workflow in crm connector"
      },
      "ConnectorsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/Connector" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ConnectorsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "CreateUploadVideoLinkIn": {
        "properties": { "filename": { "type": "string", "title": "Filename" } },
        "type": "object",
        "required": ["filename"],
        "title": "CreateUploadVideoLinkIn",
        "description": "CreateUploadVideoLinkIn"
      },
      "CrmRedtailCreateOpportunity": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "Description": { "type": "string", "title": "Description" },
          "OpportunityType": { "type": "string", "title": "Opportunitytype" },
          "SourceContactId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcecontactid"
          }
        },
        "type": "object",
        "required": ["Name", "Description", "OpportunityType"],
        "title": "CrmRedtailCreateOpportunity",
        "description": "CrmWealthboxCreateOpportunity\n\nhttps://documenter.getpostman.com/view/7873823/SVzxXyzn#fccef1df-d716-4d1a-9433-775eaf0f5661"
      },
      "CrmSync": {
        "properties": {
          "IsEnabled": { "type": "boolean", "title": "Isenabled" },
          "IsAllowCreate": { "type": "boolean", "title": "Isallowcreate" },
          "IsAllowUpdate": { "type": "boolean", "title": "Isallowupdate" },
          "IsAllowNotes": { "type": "boolean", "title": "Isallownotes" },
          "IsAllowCallRecordings": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcallrecordings",
            "default": false
          },
          "IsAllowSubmissionNote": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowsubmissionnote",
            "default": false
          },
          "IsAllowCreateContact": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcreatecontact",
            "default": false
          },
          "IsOnlyNotesForContacts": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isonlynotesforcontacts",
            "default": false
          },
          "IsOnlyNotesForSMS": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isonlynotesforsms",
            "default": false
          },
          "IsSyncCallsRealtime": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issynccallsrealtime",
            "default": false
          },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "CallNoteTags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Callnotetags"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "CrmSyncId": { "type": "string", "title": "Crmsyncid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": [
          "IsEnabled",
          "IsAllowCreate",
          "IsAllowUpdate",
          "IsAllowNotes",
          "ConnectorId",
          "UserId",
          "CrmSyncId",
          "CreatedAt"
        ],
        "title": "CrmSync",
        "description": "CrmSync\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "CrmSyncCreate": {
        "properties": {
          "IsEnabled": { "type": "boolean", "title": "Isenabled" },
          "IsAllowCreate": { "type": "boolean", "title": "Isallowcreate" },
          "IsAllowUpdate": { "type": "boolean", "title": "Isallowupdate" },
          "IsAllowNotes": { "type": "boolean", "title": "Isallownotes" },
          "IsAllowCallRecordings": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcallrecordings",
            "default": false
          },
          "IsAllowSubmissionNote": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowsubmissionnote",
            "default": false
          },
          "IsAllowCreateContact": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcreatecontact",
            "default": false
          },
          "IsOnlyNotesForContacts": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isonlynotesforcontacts",
            "default": false
          },
          "IsOnlyNotesForSMS": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isonlynotesforsms",
            "default": false
          },
          "IsSyncCallsRealtime": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issynccallsrealtime",
            "default": false
          },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "CallNoteTags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Callnotetags"
          }
        },
        "type": "object",
        "required": [
          "IsEnabled",
          "IsAllowCreate",
          "IsAllowUpdate",
          "IsAllowNotes",
          "ConnectorId"
        ],
        "title": "CrmSyncCreate",
        "description": "Create\n\nProperties to receive on crmsync creation"
      },
      "CrmSyncUpdate": {
        "properties": {
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": false
          },
          "IsAllowCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcreate",
            "default": false
          },
          "IsAllowUpdate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowupdate",
            "default": false
          },
          "IsAllowNotes": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallownotes",
            "default": false
          },
          "IsAllowCallRecordings": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcallrecordings",
            "default": false
          },
          "IsAllowSubmissionNote": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowsubmissionnote",
            "default": false
          },
          "IsAllowCreateContact": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowcreatecontact",
            "default": false
          },
          "IsOnlyNotesForContacts": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isonlynotesforcontacts",
            "default": false
          },
          "IsOnlyNotesForSMS": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isonlynotesforsms",
            "default": false
          },
          "IsSyncCallsRealtime": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issynccallsrealtime",
            "default": false
          },
          "ConnectorId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorid"
          },
          "CallNoteTags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Callnotetags"
          }
        },
        "type": "object",
        "title": "CrmSyncUpdate",
        "description": "Update\n\nProperties to receive on crmsync update"
      },
      "CrmSyncsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/CrmSync" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "CrmSyncsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "CrmWealthboxCreateOpportunity": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "Description": { "type": "string", "title": "Description" },
          "Stage": { "type": "string", "title": "Stage" },
          "SourceContactId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcecontactid"
          }
        },
        "type": "object",
        "required": ["Name", "Description", "Stage"],
        "title": "CrmWealthboxCreateOpportunity",
        "description": "CrmWealthboxCreateOpportunity\n\nhttps://dev.wealthbox.com/#opportunities-collection-post"
      },
      "ExchangeRequest": {
        "properties": {
          "Code": { "type": "string", "title": "Code" },
          "State": { "type": "string", "title": "State" }
        },
        "type": "object",
        "required": ["Code", "State"],
        "title": "ExchangeRequest",
        "description": "Exchange Request\n\nA request to finish the auth code exchange"
      },
      "GenerateVideoIn": {
        "properties": {
          "VideoId": { "type": "string", "title": "Videoid" },
          "VideoTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Videotitle"
          },
          "Theme": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Theme"
          }
        },
        "type": "object",
        "required": ["VideoId"],
        "title": "GenerateVideoIn",
        "description": "Base"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Household": {
        "properties": {
          "Id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Id"
          },
          "Name": { "type": "string", "title": "Name" }
        },
        "type": "object",
        "required": ["Name"],
        "title": "Household",
        "description": "Information about Quivr household"
      },
      "HubSpotProperty": {
        "properties": {
          "FieldType": { "type": "string", "title": "Fieldtype" },
          "Label": { "type": "string", "title": "Label" },
          "Name": { "type": "string", "title": "Name" },
          "FilterValues": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtervalues",
            "default": []
          }
        },
        "type": "object",
        "required": ["FieldType", "Label", "Name"],
        "title": "HubSpotProperty",
        "description": "Meta for HubSpot api property"
      },
      "HubspotActionContext": {
        "properties": {
          "workflowId": { "type": "integer", "title": "Workflowid" },
          "actionId": { "type": "integer", "title": "Actionid" },
          "actionExecutionIndexIdentifier": {
            "$ref": "#/components/schemas/ActionExecutionIndexIdentifier"
          },
          "source": { "type": "string", "title": "Source" }
        },
        "type": "object",
        "required": [
          "workflowId",
          "actionId",
          "actionExecutionIndexIdentifier",
          "source"
        ],
        "title": "HubspotActionContext",
        "description": "Hubspot action context model"
      },
      "HubspotActionObject": {
        "properties": {
          "objectId": { "type": "integer", "title": "Objectid" },
          "propertyValues": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertyValue"
            },
            "type": "object",
            "title": "Propertyvalues"
          },
          "properties": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Properties"
          },
          "objectType": { "type": "string", "title": "Objecttype" }
        },
        "type": "object",
        "required": ["objectId", "propertyValues", "properties", "objectType"],
        "title": "HubspotActionObject",
        "description": "Hubspot action object model"
      },
      "HubspotActionOrigin": {
        "properties": {
          "portalId": { "type": "integer", "title": "Portalid" },
          "actionDefinitionId": {
            "type": "integer",
            "title": "Actiondefinitionid"
          },
          "actionDefinitionVersion": {
            "type": "integer",
            "title": "Actiondefinitionversion"
          }
        },
        "type": "object",
        "required": [
          "portalId",
          "actionDefinitionId",
          "actionDefinitionVersion"
        ],
        "title": "HubspotActionOrigin",
        "description": "Hubspot action origin model"
      },
      "HubspotActionPayload": {
        "properties": {
          "callbackId": { "type": "string", "title": "Callbackid" },
          "origin": { "$ref": "#/components/schemas/HubspotActionOrigin" },
          "context": { "$ref": "#/components/schemas/HubspotActionContext" },
          "object": { "$ref": "#/components/schemas/HubspotActionObject" },
          "fields": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Fields"
          },
          "inputFields": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Inputfields"
          }
        },
        "type": "object",
        "required": [
          "callbackId",
          "origin",
          "context",
          "object",
          "fields",
          "inputFields"
        ],
        "title": "HubspotActionPayload",
        "description": "Hubspot action payload model"
      },
      "HubspotSubscriptionType": {
        "type": "string",
        "enum": [
          "contact.propertyChange",
          "contact.creation",
          "contact.deletion"
        ],
        "title": "HubspotSubscriptionType",
        "description": "Hubspot subscription types"
      },
      "HubspotWebhookPayload": {
        "properties": {
          "appId": { "type": "integer", "title": "Appid" },
          "eventId": { "type": "integer", "title": "Eventid" },
          "subscriptionId": { "type": "integer", "title": "Subscriptionid" },
          "portalId": { "type": "integer", "title": "Portalid" },
          "occurredAt": { "type": "integer", "title": "Occurredat" },
          "subscriptionType": {
            "$ref": "#/components/schemas/HubspotSubscriptionType"
          },
          "attemptNumber": { "type": "integer", "title": "Attemptnumber" },
          "objectId": { "type": "integer", "title": "Objectid" },
          "changeSource": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Changesource"
          },
          "propertyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Propertyname"
          },
          "propertyValue": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Propertyvalue"
          }
        },
        "type": "object",
        "required": [
          "appId",
          "eventId",
          "subscriptionId",
          "portalId",
          "occurredAt",
          "subscriptionType",
          "attemptNumber",
          "objectId"
        ],
        "title": "HubspotWebhookPayload",
        "description": "Hubspot webhook payload model"
      },
      "HubspotWebhookResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the webhook was processed successfully",
            "default": true
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Response message",
            "default": "Webhook processed successfully"
          }
        },
        "type": "object",
        "title": "HubspotWebhookResponse",
        "description": "Hubspot webhook response model"
      },
      "ImpersonateRequest": {
        "properties": { "UserId": { "type": "string", "title": "Userid" } },
        "type": "object",
        "required": ["UserId"],
        "title": "ImpersonateRequest",
        "description": "Request for impersonate"
      },
      "Journey": {
        "properties": {
          "AccountCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Accountcreated"
          },
          "SubscriptionCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Subscriptioncreated"
          },
          "OnboardingCompleted": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Onboardingcompleted"
          },
          "AvatarUploaded": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Avataruploaded"
          },
          "CrmConnectorCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Crmconnectorcreated"
          },
          "CrmSyncEnabled": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Crmsyncenabled"
          },
          "FirstMessageSent": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Firstmessagesent"
          },
          "SubmitPortRequest": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Submitportrequest"
          },
          "SetupCallFlow": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Setupcallflow"
          },
          "SetupBusinessHours": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Setupbusinesshours"
          },
          "EmailConnectorCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Emailconnectorcreated"
          },
          "A2PRegistrationSubmitted": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "A2Pregistrationsubmitted"
          },
          "ComplianceMessageUpdated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Compliancemessageupdated"
          },
          "ArchiverConnectorCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Archiverconnectorcreated"
          },
          "ArchiverRuleCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Archiverrulecreated"
          },
          "TeamInvited": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Teaminvited"
          },
          "MediaImageCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Mediaimagecreated"
          },
          "SmsTemplateCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Smstemplatecreated"
          },
          "AutomationRuleCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Automationrulecreated"
          },
          "BroadcastIntroSent": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Broadcastintrosent"
          },
          "BroadcastHolidaySent": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Broadcastholidaysent"
          },
          "VideoCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Videocreated"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "JourneyId": { "type": "string", "title": "Journeyid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["UserId", "JourneyId", "CreatedTime"],
        "title": "Journey",
        "description": "Journey\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "JourneyKeys": {
        "type": "string",
        "enum": [
          "AccountCreated",
          "SubscriptionCreated",
          "AvatarUploaded",
          "EmailConnectorCreated",
          "CrmConnectorCreated",
          "CrmSyncEnabled",
          "FirstMessageSent",
          "SubmitPortRequest",
          "SetupCallFlow",
          "SetupBusinessHours",
          "A2PRegistrationSubmitted",
          "ComplianceMessageUpdated",
          "ArchiverConnectorCreated",
          "ArchiverRuleCreated",
          "TeamInvited",
          "MediaImageCreated",
          "SmsTemplateCreated",
          "AutomationRuleCreated",
          "BroadcastIntroSent",
          "BroadcastHolidaySent",
          "VideoCreated"
        ],
        "title": "JourneyKeys",
        "description": "Journey options"
      },
      "JourneyListIn": {
        "properties": {
          "journeys": {
            "items": { "$ref": "#/components/schemas/JourneyKeys" },
            "type": "array",
            "title": "Journeys"
          }
        },
        "type": "object",
        "required": ["journeys"],
        "title": "JourneyListIn",
        "description": "Capture list of changed journeys"
      },
      "JourneyUpdate": {
        "properties": {
          "AccountCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Accountcreated"
          },
          "SubscriptionCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Subscriptioncreated"
          },
          "OnboardingCompleted": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Onboardingcompleted"
          },
          "AvatarUploaded": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Avataruploaded"
          },
          "CrmConnectorCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Crmconnectorcreated"
          },
          "CrmSyncEnabled": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Crmsyncenabled"
          },
          "FirstMessageSent": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Firstmessagesent"
          },
          "SubmitPortRequest": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Submitportrequest"
          },
          "SetupCallFlow": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Setupcallflow"
          },
          "SetupBusinessHours": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Setupbusinesshours"
          },
          "EmailConnectorCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Emailconnectorcreated"
          },
          "A2PRegistrationSubmitted": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "A2Pregistrationsubmitted"
          },
          "ComplianceMessageUpdated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Compliancemessageupdated"
          },
          "ArchiverConnectorCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Archiverconnectorcreated"
          },
          "ArchiverRuleCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Archiverrulecreated"
          },
          "TeamInvited": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Teaminvited"
          },
          "MediaImageCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Mediaimagecreated"
          },
          "SmsTemplateCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Smstemplatecreated"
          },
          "AutomationRuleCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Automationrulecreated"
          },
          "BroadcastIntroSent": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Broadcastintrosent"
          },
          "BroadcastHolidaySent": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Broadcastholidaysent"
          },
          "VideoCreated": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Videocreated"
          }
        },
        "type": "object",
        "title": "JourneyUpdate",
        "description": "Update\n\nProperties to receive on preferences update"
      },
      "MedicareProListTypeEnum": {
        "type": "string",
        "enum": ["STATUSES"],
        "const": "STATUSES",
        "title": "MedicareProListTypeEnum",
        "description": "MedicarePr list type"
      },
      "MedicareProProperty": {
        "properties": {
          "FieldType": { "type": "string", "title": "Fieldtype" },
          "Label": { "type": "string", "title": "Label" },
          "Name": { "type": "string", "title": "Name" },
          "FilterValues": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Filtervalues",
            "default": []
          }
        },
        "type": "object",
        "required": ["FieldType", "Label", "Name"],
        "title": "MedicareProProperty",
        "description": "Meta for MedicarePro api property"
      },
      "MedicareProWebhookSendMessage": {
        "properties": {
          "MessageBody": { "type": "string", "title": "Messagebody" },
          "MessageMediaUrls": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Messagemediaurls"
          },
          "ToNumber": {
            "type": "string",
            "pattern": "^\\+\\d{11}$",
            "title": "Tonumber"
          },
          "SourceAutomationUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceautomationurl"
          }
        },
        "type": "object",
        "required": ["MessageBody", "ToNumber"],
        "title": "MedicareProWebhookSendMessage",
        "description": "MedicareProWebhookSendMessage"
      },
      "MedicareProWebhookSendMessageResponse": {
        "properties": { "Id": { "type": "string", "title": "Id" } },
        "type": "object",
        "required": ["Id"],
        "title": "MedicareProWebhookSendMessageResponse",
        "description": "MedicareProWebhookSendMessageResponse"
      },
      "MessageMediaItem": {
        "properties": {
          "MediaUrl": { "type": "string", "title": "Mediaurl" },
          "MediaType": { "type": "string", "title": "Mediatype" }
        },
        "type": "object",
        "required": ["MediaUrl", "MediaType"],
        "title": "MessageMediaItem",
        "description": "MessageMediaItem\n\nMedia object can be sent and received by/from twilio\n\nhttps://www.twilio.com/docs/sms/accepted-mime-types"
      },
      "Milestones": {
        "properties": {
          "IsCompletedOnboarding": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iscompletedonboarding",
            "default": false
          }
        },
        "type": "object",
        "title": "Milestones",
        "description": "Milestones\n\nMilestones provides fields for user milestones"
      },
      "MilestonesInDB": {
        "properties": {
          "IsCompletedOnboarding": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iscompletedonboarding",
            "default": false
          }
        },
        "type": "object",
        "title": "MilestonesInDB",
        "description": "Milestones\n\nSome more info not needed on ui"
      },
      "OrgA2P": {
        "properties": {
          "OrganizationType": {
            "$ref": "#/components/schemas/CompanyTypesEnum"
          },
          "LegalType": { "$ref": "#/components/schemas/BusinessTypesEnum" },
          "Name": { "type": "string", "title": "Name" },
          "NumberType": {
            "$ref": "#/components/schemas/RegistrationIdTypeEnum"
          },
          "Number": { "type": "string", "title": "Number" },
          "CallerId": { "type": "string", "title": "Callerid" },
          "Website": { "type": "string", "title": "Website" },
          "PrivacyPolicy": { "type": "string", "title": "Privacypolicy" },
          "IsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ishighvolume",
            "default": false
          },
          "Address": { "type": "string", "title": "Address" },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": { "type": "string", "title": "City" },
          "State": { "type": "string", "title": "State" },
          "Zip": { "type": "string", "title": "Zip" },
          "Industry": { "type": "string", "title": "Industry" },
          "Status": {
            "anyOf": [
              { "$ref": "#/components/schemas/OrgA2PStatusEnum" },
              { "type": "null" }
            ],
            "default": "DRAFT"
          },
          "RejectionReason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Rejectionreason"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          },
          "OrganizationId": { "type": "string", "title": "Organizationid" },
          "OrgA2pId": { "type": "string", "title": "Orga2Pid" },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "OrganizationType",
          "LegalType",
          "Name",
          "NumberType",
          "Number",
          "CallerId",
          "Website",
          "PrivacyPolicy",
          "Address",
          "City",
          "State",
          "Zip",
          "Industry",
          "OrganizationId",
          "OrgA2pId",
          "CreatedAt"
        ],
        "title": "OrgA2P",
        "description": "OrgA2P\n\nThe model to be used for responses. Doesn't include internal PK and SK"
      },
      "OrgA2PCreate": {
        "properties": {
          "OrganizationType": {
            "$ref": "#/components/schemas/CompanyTypesEnum"
          },
          "LegalType": { "$ref": "#/components/schemas/BusinessTypesEnum" },
          "Name": { "type": "string", "title": "Name" },
          "NumberType": {
            "$ref": "#/components/schemas/RegistrationIdTypeEnum"
          },
          "Number": { "type": "string", "title": "Number" },
          "CallerId": { "type": "string", "title": "Callerid" },
          "Website": { "type": "string", "title": "Website" },
          "PrivacyPolicy": { "type": "string", "title": "Privacypolicy" },
          "IsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ishighvolume",
            "default": false
          },
          "Address": { "type": "string", "title": "Address" },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": { "type": "string", "title": "City" },
          "State": { "type": "string", "title": "State" },
          "Zip": { "type": "string", "title": "Zip" },
          "Industry": { "type": "string", "title": "Industry" },
          "Status": {
            "anyOf": [
              { "$ref": "#/components/schemas/OrgA2PStatusEnum" },
              { "type": "null" }
            ],
            "default": "DRAFT"
          },
          "RejectionReason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Rejectionreason"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          }
        },
        "type": "object",
        "required": [
          "OrganizationType",
          "LegalType",
          "Name",
          "NumberType",
          "Number",
          "CallerId",
          "Website",
          "PrivacyPolicy",
          "Address",
          "City",
          "State",
          "Zip",
          "Industry"
        ],
        "title": "OrgA2PCreate",
        "description": "Create\n\nProperties to receive on A2P registration creation"
      },
      "OrgA2PStatusEnum": {
        "type": "string",
        "enum": ["DRAFT", "RECEIVED", "APPROVED", "REJECTED"],
        "title": "OrgA2PStatusEnum",
        "description": "A2P Registration Status Enum\n\nStatus tracking for business registration lifecycle"
      },
      "OrgA2PUpdate": {
        "properties": {
          "OrganizationType": {
            "anyOf": [
              { "$ref": "#/components/schemas/CompanyTypesEnum" },
              { "type": "null" }
            ]
          },
          "LegalType": {
            "anyOf": [
              { "$ref": "#/components/schemas/BusinessTypesEnum" },
              { "type": "null" }
            ]
          },
          "Name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "NumberType": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegistrationIdTypeEnum" },
              { "type": "null" }
            ]
          },
          "Number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Number"
          },
          "CallerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Callerid"
          },
          "Website": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Website"
          },
          "PrivacyPolicy": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Privacypolicy"
          },
          "IsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ishighvolume",
            "default": false
          },
          "Address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Status": {
            "anyOf": [
              { "$ref": "#/components/schemas/OrgA2PStatusEnum" },
              { "type": "null" }
            ],
            "default": "DRAFT"
          },
          "RejectionReason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Rejectionreason"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          },
          "OrgA2pId": { "type": "string", "title": "Orga2Pid" }
        },
        "type": "object",
        "required": ["OrgA2pId"],
        "title": "OrgA2PUpdate",
        "description": "Update\n\nProperties to receive on A2P registration update"
      },
      "OrgA2PsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/OrgA2P" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "OrgA2PsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "Organization": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "StripeCustomerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripecustomerid"
          },
          "SubscriptionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Subscriptionid"
          },
          "SubscriptionStatus": {
            "anyOf": [
              { "$ref": "#/components/schemas/StripeSubscriptionStatusEnum" },
              { "type": "null" }
            ]
          },
          "BillingNotes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingnotes"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandsid"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioExternalCampaignId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioexternalcampaignid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          },
          "TwilioCnamSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamsid"
          },
          "TwilioCnamStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamstatus"
          },
          "TwilioShakenStirSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirsid"
          },
          "TwilioShakenStirStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirstatus"
          },
          "TwilioNumberRegistrationStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilionumberregistrationstatus"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "LegalCompanyType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcompanytype"
          },
          "LegalPublicCompanyExchange": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyexchange"
          },
          "LegalPublicCompanyTicker": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyticker"
          },
          "LegalBusinessType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesstype"
          },
          "LegalId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalid"
          },
          "LegalCallerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcallerid"
          },
          "LegalIdType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalidtype"
          },
          "LegalBusinessWebsite": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesswebsite"
          },
          "LegalPrivacyPolicyUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalprivacypolicyurl"
          },
          "LegalSocialProfile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalsocialprofile"
          },
          "LegalName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalname"
          },
          "LegalAddress": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress"
          },
          "LegalAddress2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress2"
          },
          "LegalCity": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcity"
          },
          "LegalState": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalstate"
          },
          "LegalZip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalzip"
          },
          "LegalIsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalishighvolume"
          },
          "LegalIsConfirmSubmit": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalisconfirmsubmit"
          },
          "OrganizationId": { "type": "string", "title": "Organizationid" },
          "UpdatedTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedtime"
          },
          "CreatedTime": { "type": "string", "title": "Createdtime" }
        },
        "type": "object",
        "required": ["Name", "OrganizationId", "CreatedTime"],
        "title": "Organization",
        "description": "Organization\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "OrganizationBillingContact": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "Email": { "type": "string", "title": "Email" },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          }
        },
        "type": "object",
        "required": ["Name", "Email"],
        "title": "OrganizationBillingContact",
        "description": "OrganizationBillingContact"
      },
      "OrganizationCreate": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "StripeCustomerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripecustomerid"
          },
          "SubscriptionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Subscriptionid"
          },
          "SubscriptionStatus": {
            "anyOf": [
              { "$ref": "#/components/schemas/StripeSubscriptionStatusEnum" },
              { "type": "null" }
            ]
          },
          "BillingNotes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingnotes"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandsid"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioExternalCampaignId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioexternalcampaignid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          },
          "TwilioCnamSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamsid"
          },
          "TwilioCnamStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamstatus"
          },
          "TwilioShakenStirSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirsid"
          },
          "TwilioShakenStirStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirstatus"
          },
          "TwilioNumberRegistrationStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilionumberregistrationstatus"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "LegalCompanyType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcompanytype"
          },
          "LegalPublicCompanyExchange": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyexchange"
          },
          "LegalPublicCompanyTicker": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyticker"
          },
          "LegalBusinessType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesstype"
          },
          "LegalId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalid"
          },
          "LegalCallerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcallerid"
          },
          "LegalIdType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalidtype"
          },
          "LegalBusinessWebsite": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesswebsite"
          },
          "LegalPrivacyPolicyUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalprivacypolicyurl"
          },
          "LegalSocialProfile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalsocialprofile"
          },
          "LegalName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalname"
          },
          "LegalAddress": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress"
          },
          "LegalAddress2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress2"
          },
          "LegalCity": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcity"
          },
          "LegalState": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalstate"
          },
          "LegalZip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalzip"
          },
          "LegalIsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalishighvolume"
          },
          "LegalIsConfirmSubmit": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalisconfirmsubmit"
          }
        },
        "type": "object",
        "required": ["Name"],
        "title": "OrganizationCreate",
        "description": "OrganizationCreate\n\nProperties to receive on organization creation"
      },
      "OrganizationSubscription": {
        "properties": {
          "SubscriptionStatus": {
            "type": "string",
            "title": "Subscriptionstatus"
          },
          "CurrentPeriodEndTime": {
            "type": "string",
            "title": "Currentperiodendtime"
          }
        },
        "type": "object",
        "required": ["SubscriptionStatus", "CurrentPeriodEndTime"],
        "title": "OrganizationSubscription",
        "description": "OrganizationSubscription"
      },
      "OrganizationUpdate": {
        "properties": {
          "Name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "StripeCustomerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripecustomerid"
          },
          "SubscriptionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Subscriptionid"
          },
          "SubscriptionStatus": {
            "anyOf": [
              { "$ref": "#/components/schemas/StripeSubscriptionStatusEnum" },
              { "type": "null" }
            ]
          },
          "BillingNotes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingnotes"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandsid"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioExternalCampaignId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioexternalcampaignid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          },
          "TwilioCnamSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamsid"
          },
          "TwilioCnamStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamstatus"
          },
          "TwilioShakenStirSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirsid"
          },
          "TwilioShakenStirStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirstatus"
          },
          "TwilioNumberRegistrationStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilionumberregistrationstatus"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "LegalCompanyType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcompanytype"
          },
          "LegalPublicCompanyExchange": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyexchange"
          },
          "LegalPublicCompanyTicker": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyticker"
          },
          "LegalBusinessType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesstype"
          },
          "LegalId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalid"
          },
          "LegalCallerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcallerid"
          },
          "LegalIdType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalidtype"
          },
          "LegalBusinessWebsite": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesswebsite"
          },
          "LegalPrivacyPolicyUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalprivacypolicyurl"
          },
          "LegalSocialProfile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalsocialprofile"
          },
          "LegalName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalname"
          },
          "LegalAddress": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress"
          },
          "LegalAddress2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress2"
          },
          "LegalCity": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcity"
          },
          "LegalState": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalstate"
          },
          "LegalZip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalzip"
          },
          "LegalIsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalishighvolume"
          },
          "LegalIsConfirmSubmit": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalisconfirmsubmit"
          }
        },
        "type": "object",
        "title": "OrganizationUpdate",
        "description": "Update\n\nProperties to receive on organization update"
      },
      "OrganizationUser": {
        "properties": {
          "Name": { "type": "string", "title": "Name" },
          "ImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Imageurl"
          },
          "Email": { "type": "string", "title": "Email" },
          "UserId": { "type": "string", "title": "Userid" },
          "IsAdmin": { "type": "boolean", "title": "Isadmin" },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          }
        },
        "type": "object",
        "required": ["Name", "Email", "UserId", "IsAdmin"],
        "title": "OrganizationUser",
        "description": "OrganizationUser\n\nSimplified view of the users in an org"
      },
      "OrganizationsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/Organization" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "OrganizationsPaginated",
        "description": "Pagination for organizations"
      },
      "PortRequest": {
        "properties": {
          "Number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Number"
          },
          "Carrier": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Carrier"
          },
          "AccountNumber": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Accountnumber"
          },
          "TransferPin": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transferpin"
          },
          "BillingStatementUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingstatementurl"
          },
          "BillingStatementFile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingstatementfile"
          },
          "PortType": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortRequestType" },
              { "type": "null" }
            ]
          },
          "SubmittedTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Submittedtime"
          },
          "IsSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issubmitted"
          },
          "IsAuthorized": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isauthorized"
          },
          "IsApproved": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isapproved"
          },
          "IsCallsPorted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iscallsported"
          },
          "IsTextsPorted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Istextsported"
          },
          "AuthorizedRepresentativeName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Authorizedrepresentativename"
          },
          "AuthorizedRepresentativeEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Authorizedrepresentativeemail"
          },
          "AccountPhoneNumber": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Accountphonenumber"
          },
          "IsBusiness": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isbusiness"
          },
          "AccountName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Accountname"
          },
          "Address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "PortRequestId": { "type": "string", "title": "Portrequestid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["UserId", "PortRequestId", "CreatedTime"],
        "title": "PortRequest",
        "description": "PortRequest\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "PortRequestType": {
        "type": "string",
        "enum": ["FULL", "SMS_ONLY"],
        "title": "PortRequestType",
        "description": "PortRequestType options"
      },
      "PortRequestUpdate": {
        "properties": {
          "Number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Number"
          },
          "Carrier": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Carrier"
          },
          "AccountNumber": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Accountnumber"
          },
          "TransferPin": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transferpin"
          },
          "BillingStatementUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingstatementurl"
          },
          "BillingStatementFile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billingstatementfile"
          },
          "PortType": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortRequestType" },
              { "type": "null" }
            ]
          },
          "SubmittedTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Submittedtime"
          },
          "IsSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issubmitted"
          },
          "IsAuthorized": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isauthorized"
          },
          "IsApproved": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isapproved"
          },
          "IsCallsPorted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iscallsported"
          },
          "IsTextsPorted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Istextsported"
          },
          "AuthorizedRepresentativeName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Authorizedrepresentativename"
          },
          "AuthorizedRepresentativeEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Authorizedrepresentativeemail"
          },
          "AccountPhoneNumber": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Accountphonenumber"
          },
          "IsBusiness": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isbusiness"
          },
          "AccountName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Accountname"
          },
          "Address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          }
        },
        "type": "object",
        "title": "PortRequestUpdate",
        "description": "Update\n\nProperties to receive on portrequest update"
      },
      "Preferences": {
        "properties": {
          "IsSendOnEnter": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issendonenter"
          },
          "IsEnableHotkeys": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablehotkeys"
          },
          "IsEnableInAppCalling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenableinappcalling",
            "default": false
          },
          "IsEnableDoNotDisturb": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabledonotdisturb"
          },
          "IsEnableSoundOnSend": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablesoundonsend"
          },
          "IsEnableSoundOnCompleted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablesoundoncompleted"
          },
          "IsEnableSoundOnDialer": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablesoundondialer"
          },
          "IsPromptCallNote": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispromptcallnote"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "PreferencesId": { "type": "string", "title": "Preferencesid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["UserId", "PreferencesId", "CreatedTime"],
        "title": "Preferences",
        "description": "Preferences\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "PreferencesUpdate": {
        "properties": {
          "IsSendOnEnter": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issendonenter"
          },
          "IsEnableHotkeys": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablehotkeys"
          },
          "IsEnableInAppCalling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenableinappcalling",
            "default": false
          },
          "IsEnableDoNotDisturb": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabledonotdisturb"
          },
          "IsEnableSoundOnSend": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablesoundonsend"
          },
          "IsEnableSoundOnCompleted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablesoundoncompleted"
          },
          "IsEnableSoundOnDialer": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenablesoundondialer"
          },
          "IsPromptCallNote": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispromptcallnote"
          }
        },
        "type": "object",
        "title": "PreferencesUpdate",
        "description": "Update\n\nProperties to receive on preferences update"
      },
      "PresignUrlPost": {
        "properties": {
          "post_url": { "type": "string", "title": "Post Url" },
          "post_fields": { "type": "object", "title": "Post Fields" },
          "post_headers": { "type": "object", "title": "Post Headers" }
        },
        "type": "object",
        "required": ["post_url", "post_fields", "post_headers"],
        "title": "PresignUrlPost",
        "description": "CreateUploadVideoLinkOut"
      },
      "ProductData": {
        "properties": {
          "ProductId": { "type": "string", "title": "Productid" },
          "PriceId": { "type": "string", "title": "Priceid" },
          "StripeCheckoutLineItems": {
            "anyOf": [
              { "items": { "type": "object" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Stripecheckoutlineitems"
          }
        },
        "type": "object",
        "required": ["ProductId", "PriceId"],
        "title": "ProductData",
        "description": "Registration Product\n\nRepresents the registration product in the billing config"
      },
      "Prompt": {
        "properties": {
          "TextIn": { "type": "string", "title": "Textin" },
          "Temperature": {
            "anyOf": [
              { "type": "number" },
              { "type": "integer" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Temperature"
          }
        },
        "type": "object",
        "required": ["TextIn"],
        "title": "Prompt",
        "description": "PromptBase\n\nPrompt input for openai text completion"
      },
      "PromptContactDetails": {
        "properties": {
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          }
        },
        "type": "object",
        "title": "PromptContactDetails",
        "description": "PromptContactDetails\n\nPrompt contact details"
      },
      "PropertyValue": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "value": { "type": "string", "title": "Value" },
          "timestamp": { "type": "integer", "title": "Timestamp" },
          "sourceId": { "type": "string", "title": "Sourceid" },
          "source": { "type": "string", "title": "Source" },
          "sourceVid": { "items": {}, "type": "array", "title": "Sourcevid" },
          "requestId": { "type": "string", "title": "Requestid" },
          "updatedByUserId": { "type": "integer", "title": "Updatedbyuserid" },
          "useTimestampAsPersistenceTimestamp": {
            "type": "boolean",
            "title": "Usetimestampaspersistencetimestamp"
          },
          "sourceUpstreamDeployable": {
            "type": "string",
            "title": "Sourceupstreamdeployable"
          }
        },
        "type": "object",
        "required": [
          "name",
          "value",
          "timestamp",
          "sourceId",
          "source",
          "sourceVid",
          "requestId",
          "updatedByUserId",
          "useTimestampAsPersistenceTimestamp",
          "sourceUpstreamDeployable"
        ],
        "title": "PropertyValue",
        "description": "Hubspot property value model"
      },
      "PublicTeamMemberInvite": {
        "properties": {
          "Email": { "type": "string", "title": "Email" },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "OrganizationName": { "type": "string", "title": "Organizationname" },
          "InviterName": { "type": "string", "title": "Invitername" },
          "InviterEmail": { "type": "string", "title": "Inviteremail" },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          }
        },
        "type": "object",
        "required": [
          "Email",
          "OrganizationName",
          "InviterName",
          "InviterEmail"
        ],
        "title": "PublicTeamMemberInvite",
        "description": "Response for public invite"
      },
      "PublicTeamMemberJoinInvite": {
        "properties": {
          "TeamMemberId": { "type": "string", "title": "Teammemberid" },
          "Email": { "type": "string", "title": "Email" },
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          }
        },
        "type": "object",
        "required": ["TeamMemberId", "Email", "FirstName", "LastName"],
        "title": "PublicTeamMemberJoinInvite",
        "description": "Data to confirm join"
      },
      "PublicTeamMemberJoinInviteResponse": {
        "properties": {
          "TeamMemberId": { "type": "string", "title": "Teammemberid" },
          "Email": { "type": "string", "title": "Email" },
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "TempPassword": { "type": "string", "title": "Temppassword" }
        },
        "type": "object",
        "required": [
          "TeamMemberId",
          "Email",
          "FirstName",
          "LastName",
          "TempPassword"
        ],
        "title": "PublicTeamMemberJoinInviteResponse",
        "description": "Data response to confirm join"
      },
      "PublicVideo": {
        "properties": {
          "VideoId": { "type": "string", "title": "Videoid" },
          "EmbedUrl": { "type": "string", "title": "Embedurl" },
          "ThumbnailUrl": { "type": "string", "title": "Thumbnailurl" },
          "LinkTagOEmbedJsonUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Linktagoembedjsonurl"
          },
          "LinkTagOEmbedXmlUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Linktagoembedxmlurl"
          },
          "IsHostedS3": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ishosteds3"
          },
          "BrowserPageTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserpagetitle"
          },
          "BrowserFaviconUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserfaviconurl"
          },
          "MetaTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metatitle"
          },
          "MetaDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metadescription"
          },
          "DisplayTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaytitle"
          },
          "DisplayDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaydescription"
          },
          "DisplayBrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandurl"
          },
          "DisplayBrandActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandactionlink"
          },
          "DisplayBrandSize": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandsize"
          },
          "DisplayAuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorname"
          },
          "DisplayAuthorTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthortitle"
          },
          "DisplayAuthorUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorurl"
          },
          "DisplayAuthorPhone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorphone"
          },
          "DisplayAuthorEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthoremail"
          },
          "DisplayFooterLegal": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayfooterlegal",
            "default": "Powered by CurrentClient. All rights reserved."
          },
          "IsDisplayPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplayprimaryaction"
          },
          "DisplayPrimaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactiontext"
          },
          "DisplayPrimaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactionlink"
          },
          "IsDisplaySecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplaysecondaryaction"
          },
          "DisplaySecondaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactiontext"
          },
          "DisplaySecondaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactionlink"
          },
          "IsPublic": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispublic"
          },
          "StylePrimaryBgColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimarybgcolor"
          },
          "StylePrimaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryfontcolor"
          },
          "StyleSecondaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryfontcolor"
          },
          "StyleActionBannerBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleactionbannerbg"
          },
          "StylePrimaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactionbg"
          },
          "StylePrimaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactioncolor"
          },
          "StyleSecondaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactionbg"
          },
          "StyleSecondaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactioncolor"
          },
          "StyleLegalFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylelegalfontcolor"
          }
        },
        "type": "object",
        "required": ["VideoId", "EmbedUrl", "ThumbnailUrl"],
        "title": "PublicVideo",
        "description": "VideoBase\n\nProvides user videos"
      },
      "PublicVideoViewCreate": {
        "properties": {
          "VideoId": { "type": "string", "title": "Videoid" },
          "AnonymousId": { "type": "string", "title": "Anonymousid" },
          "VideoTitle": { "type": "string", "title": "Videotitle" },
          "IsClickedPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isclickedprimaryaction"
          },
          "IsClickedSecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isclickedsecondaryaction"
          }
        },
        "type": "object",
        "required": ["VideoId", "AnonymousId", "VideoTitle"],
        "title": "PublicVideoViewCreate",
        "description": "Create\n\nProperties to receive on videoview creation"
      },
      "PublicVoice": {
        "properties": {
          "VoiceId": { "type": "string", "title": "Voiceid" },
          "AudioUrl": { "type": "string", "title": "Audiourl" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "TranscriptionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptiontext"
          },
          "TranscriptionStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptionstatus"
          },
          "DisplayAuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorname"
          },
          "DisplayAuthorTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthortitle"
          },
          "DisplayAuthorUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorurl"
          },
          "DisplayAuthorPhone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorphone"
          },
          "DisplayAuthorEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthoremail"
          },
          "DisplayFooterLegal": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayfooterlegal",
            "default": "Powered by CurrentClient. All rights reserved."
          },
          "DisplayBrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandurl"
          },
          "DisplayBrandSize": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandsize"
          },
          "DisplayBrandActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandactionlink"
          },
          "StylePrimaryBgColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimarybgcolor"
          },
          "StylePrimaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryfontcolor"
          },
          "StyleSecondaryFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryfontcolor"
          },
          "StyleLegalFontColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylelegalfontcolor"
          },
          "StyleActionBannerBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleactionbannerbg"
          },
          "StylePrimaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactionbg"
          },
          "StylePrimaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Styleprimaryactioncolor"
          },
          "StyleSecondaryActionBg": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactionbg"
          },
          "StyleSecondaryActionColor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stylesecondaryactioncolor"
          },
          "ThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Thumbnailurl"
          }
        },
        "type": "object",
        "required": ["VoiceId", "AudioUrl", "CreatedTime"],
        "title": "PublicVoice",
        "description": "VoiceBase\n\nProvides user voice"
      },
      "RadiusBobListTypeEnum": {
        "type": "string",
        "enum": ["STATES"],
        "const": "STATES",
        "title": "RadiusBobListTypeEnum",
        "description": "RadiusBob list type"
      },
      "RegisteredNumber": {
        "properties": {
          "PhoneNumber": { "type": "string", "title": "Phonenumber" },
          "Sid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sid"
          },
          "FriendlyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Friendlyname"
          },
          "DateCreated": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Datecreated"
          },
          "DateUpdated": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Dateupdated"
          },
          "SmsUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Smsurl"
          },
          "SmsMethod": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Smsmethod"
          },
          "SmsFallbackUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Smsfallbackurl"
          },
          "SmsFallbackMethod": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Smsfallbackmethod"
          },
          "AddressRequirements": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Addressrequirements"
          },
          "Capabilities": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumberCapabilities" },
              { "type": "null" }
            ]
          },
          "StatusCallback": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Statuscallback"
          },
          "StatusCallbackMethod": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Statuscallbackmethod"
          },
          "Origin": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Origin"
          },
          "Status": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Status"
          }
        },
        "type": "object",
        "required": ["PhoneNumber"],
        "title": "RegisteredNumber",
        "description": "RegisteredNumber"
      },
      "RegisteredNumberCapabilities": {
        "properties": {
          "IsMMSEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismmsenabled"
          },
          "IsSMSEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Issmsenabled"
          },
          "IsVoiceEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isvoiceenabled"
          }
        },
        "type": "object",
        "title": "RegisteredNumberCapabilities",
        "description": "RegisteredNumberCapabilities"
      },
      "RegisteredNumberUpdate": {
        "properties": {
          "PhoneNumber": { "type": "string", "title": "Phonenumber" },
          "PhoneSid": { "type": "string", "title": "Phonesid" }
        },
        "type": "object",
        "required": ["PhoneNumber", "PhoneSid"],
        "title": "RegisteredNumberUpdate",
        "description": "RegisteredNumberUpdate"
      },
      "RegistrationIdTypeEnum": {
        "type": "string",
        "enum": ["EIN", "DUNS"],
        "title": "RegistrationIdTypeEnum",
        "description": "Registration Id Type Enum\nType of id using to regsiter"
      },
      "ResponseMetaBase": {
        "properties": {
          "cursor": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cursor"
          },
          "limit": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Limit"
          },
          "total": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Total"
          },
          "calls": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Calls"
          },
          "stats": {
            "anyOf": [
              { "items": { "type": "object" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Stats"
          }
        },
        "type": "object",
        "title": "ResponseMetaBase",
        "description": "Base\n\nResponse meta values, hold the cursor, total count and whatever else"
      },
      "RollCall": {
        "properties": {
          "ViewingConversation": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Viewingconversation"
          },
          "Online": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Online"
          },
          "Status": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Status"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "RollCallId": { "type": "string", "title": "Rollcallid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["UserId", "RollCallId", "CreatedTime"],
        "title": "RollCall",
        "description": "RollCall\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "RollCallUpdate": {
        "properties": {
          "ViewingConversation": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Viewingconversation"
          },
          "Online": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Online"
          },
          "Status": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Status"
          }
        },
        "type": "object",
        "title": "RollCallUpdate",
        "description": "Update\n\nProperties to receive on preferences update"
      },
      "RollCallViewingUpdate": {
        "properties": {
          "ConversationId": { "type": "string", "title": "Conversationid" },
          "IsTyping": {
            "type": "boolean",
            "title": "Istyping",
            "default": false
          }
        },
        "type": "object",
        "required": ["ConversationId"],
        "title": "RollCallViewingUpdate",
        "description": "RollCallViewingUpdate\n\nProperties to receive on viewing conversation"
      },
      "RoutingBucket": {
        "properties": {
          "EventName": { "type": "string", "title": "Eventname" },
          "Frequency": { "type": "string", "title": "Frequency" },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "ConnectorType": { "$ref": "#/components/schemas/ConnectorTypeEnum" },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Connectormeta"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "RoutingBucketId": { "type": "string", "title": "Routingbucketid" },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "RoutingTime": { "type": "integer", "title": "Routingtime" },
          "IsDelivered": { "type": "boolean", "title": "Isdelivered" },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          },
          "CountItems": { "type": "integer", "title": "Countitems" }
        },
        "type": "object",
        "required": [
          "EventName",
          "Frequency",
          "ConnectorId",
          "ConnectorName",
          "ConnectorType",
          "ConnectorMeta",
          "UserId",
          "RoutingBucketId",
          "CreatedAt",
          "RoutingTime",
          "IsDelivered",
          "CountItems"
        ],
        "title": "RoutingBucket",
        "description": "RoutingBucket\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "RoutingBucketFillItem": {
        "properties": {
          "ItemId": { "type": "string", "title": "Itemid" },
          "ItemTime": { "type": "integer", "title": "Itemtime" },
          "ItemData": { "type": "object", "title": "Itemdata" },
          "EventName": { "type": "string", "title": "Eventname" },
          "Frequency": { "type": "string", "title": "Frequency" },
          "ConnectorId": { "type": "string", "title": "Connectorid" }
        },
        "type": "object",
        "required": [
          "ItemId",
          "ItemTime",
          "ItemData",
          "EventName",
          "Frequency",
          "ConnectorId"
        ],
        "title": "RoutingBucketFillItem",
        "description": "RoutingBucketFillItem Model"
      },
      "RoutingBucketFull": {
        "properties": {
          "EventName": { "type": "string", "title": "Eventname" },
          "Frequency": { "type": "string", "title": "Frequency" },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "ConnectorType": { "$ref": "#/components/schemas/ConnectorTypeEnum" },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Connectormeta"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "RoutingBucketId": { "type": "string", "title": "Routingbucketid" },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "RoutingTime": { "type": "integer", "title": "Routingtime" },
          "IsDelivered": { "type": "boolean", "title": "Isdelivered" },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          },
          "CountItems": { "type": "integer", "title": "Countitems" },
          "S3BucketName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "S3Bucketname"
          },
          "S3Folder": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "S3Folder"
          }
        },
        "type": "object",
        "required": [
          "EventName",
          "Frequency",
          "ConnectorId",
          "ConnectorName",
          "ConnectorType",
          "ConnectorMeta",
          "UserId",
          "RoutingBucketId",
          "CreatedAt",
          "RoutingTime",
          "IsDelivered",
          "CountItems"
        ],
        "title": "RoutingBucketFull",
        "description": "RoutingBucketFull\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "RoutingBucketItem": {
        "properties": {
          "BucketId": { "type": "string", "title": "Bucketid" },
          "MessageId": { "type": "string", "title": "Messageid" },
          "IsDelivered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdelivered"
          },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          },
          "BucketMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Bucketmeta"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "RoutingBucketItemId": {
            "type": "string",
            "title": "Routingbucketitemid"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "BucketId",
          "MessageId",
          "UserId",
          "RoutingBucketItemId",
          "CreatedAt"
        ],
        "title": "RoutingBucketItem",
        "description": "RoutingBucketItem\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "RoutingBucketItemCreate": {
        "properties": {
          "BucketId": { "type": "string", "title": "Bucketid" },
          "MessageId": { "type": "string", "title": "Messageid" },
          "IsDelivered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdelivered"
          },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          },
          "BucketMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Bucketmeta"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          }
        },
        "type": "object",
        "required": ["BucketId", "MessageId"],
        "title": "RoutingBucketItemCreate",
        "description": "Create\n\nProperties to receive on routingbucket creation"
      },
      "RoutingBucketItemUpdate": {
        "properties": {
          "BucketId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Bucketid"
          },
          "MessageId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messageid"
          },
          "IsDelivered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdelivered"
          },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          },
          "BucketMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Bucketmeta"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          }
        },
        "type": "object",
        "title": "RoutingBucketItemUpdate",
        "description": "Update\n\nProperties to receive on routingbucket update"
      },
      "RoutingBucketItemsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/RoutingBucketItem" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "RoutingBucketItemsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "RoutingBucketUpdate-Input": {
        "properties": {
          "EventName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Eventname"
          },
          "Frequency": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Frequency"
          },
          "ConnectorId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorid"
          },
          "ConnectorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorname"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "ConnectorType": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorTypeEnum" },
              { "type": "null" }
            ]
          },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {},
              { "type": "null" }
            ],
            "title": "Connectormeta"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "IsDelivered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdelivered"
          },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          }
        },
        "type": "object",
        "title": "RoutingBucketUpdate",
        "description": "Update\n\nProperties to receive on routingbucket update"
      },
      "RoutingBucketUpdate-Output": {
        "properties": {
          "EventName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Eventname"
          },
          "Frequency": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Frequency"
          },
          "ConnectorId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorid"
          },
          "ConnectorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorname"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "ConnectorType": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorTypeEnum" },
              { "type": "null" }
            ]
          },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {},
              { "type": "null" }
            ],
            "title": "Connectormeta"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "IsDelivered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdelivered"
          },
          "IsError": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iserror"
          }
        },
        "type": "object",
        "title": "RoutingBucketUpdate",
        "description": "Update\n\nProperties to receive on routingbucket update"
      },
      "RoutingBucketsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/RoutingBucket" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "RoutingBucketsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "RoutingBucketsPaginatedFull": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/RoutingBucketFull" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "RoutingBucketsPaginatedFull",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "RoutingEventNamesEnum": {
        "type": "string",
        "enum": [
          "MESSAGE_INCOMING",
          "MESSAGE_ALL",
          "MESSAGE_UPDATED",
          "CALL_MISSED",
          "NEW_SUBMISSION",
          "CONTACT_VERSIONED",
          "CONTACT_UPDATED",
          "CONTACT_CREATED",
          "SMS_SENT",
          "SMS_LOG",
          "CALL_LOG",
          "CALL_UPDATED",
          "VOICEMAIL_RECEIVED",
          "CALL_RECORDING_COMPLETED",
          "VIDEO_UPLOADED",
          "SMS_UNDELIVERED",
          "CALL_TRANSCRIPT_COMPLETED"
        ],
        "title": "RoutingEventNamesEnum",
        "description": "Routing event names\n\nThis enum is copied in the module-bus and the module-routing"
      },
      "RoutingFrequencyEnum": {
        "type": "string",
        "enum": ["STREAM", "DAILY", "HOURLY", "WEEKLY"],
        "title": "RoutingFrequencyEnum",
        "description": "Routing frequency names\n\nThis enum is copied in the module-bus and the module-routing"
      },
      "RoutingRule-Input": {
        "properties": {
          "EventName": { "$ref": "#/components/schemas/RoutingEventNamesEnum" },
          "Frequency": { "$ref": "#/components/schemas/RoutingFrequencyEnum" },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm",
            "default": false
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged",
            "default": false
          },
          "IsMobileManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismobilemanaged",
            "default": false
          },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorType": { "$ref": "#/components/schemas/ConnectorTypeEnum" },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Connectormeta"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "RoutingRuleId": { "type": "string", "title": "Routingruleid" },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": [
          "EventName",
          "Frequency",
          "ConnectorId",
          "ConnectorName",
          "ConnectorType",
          "ConnectorMeta",
          "UserId",
          "RoutingRuleId",
          "CreatedAt"
        ],
        "title": "RoutingRule",
        "description": "RoutingRule\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "RoutingRule-Output": {
        "properties": {
          "EventName": { "$ref": "#/components/schemas/RoutingEventNamesEnum" },
          "Frequency": { "$ref": "#/components/schemas/RoutingFrequencyEnum" },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm",
            "default": false
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged",
            "default": false
          },
          "IsMobileManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismobilemanaged",
            "default": false
          },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorType": { "$ref": "#/components/schemas/ConnectorTypeEnum" },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Connectormeta"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "RoutingRuleId": { "type": "string", "title": "Routingruleid" },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": [
          "EventName",
          "Frequency",
          "ConnectorId",
          "ConnectorName",
          "ConnectorType",
          "ConnectorMeta",
          "UserId",
          "RoutingRuleId",
          "CreatedAt"
        ],
        "title": "RoutingRule",
        "description": "RoutingRule\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "RoutingRuleCreate": {
        "properties": {
          "EventName": { "$ref": "#/components/schemas/RoutingEventNamesEnum" },
          "Frequency": { "$ref": "#/components/schemas/RoutingFrequencyEnum" },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm",
            "default": false
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged",
            "default": false
          },
          "IsMobileManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismobilemanaged",
            "default": false
          },
          "ConnectorId": { "type": "string", "title": "Connectorid" },
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorType": { "$ref": "#/components/schemas/ConnectorTypeEnum" },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {}
            ],
            "title": "Connectormeta"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          }
        },
        "type": "object",
        "required": [
          "EventName",
          "Frequency",
          "ConnectorId",
          "ConnectorName",
          "ConnectorType",
          "ConnectorMeta"
        ],
        "title": "RoutingRuleCreate",
        "description": "Create\n\nProperties to receive on routingrule creation"
      },
      "RoutingRuleUpdate-Input": {
        "properties": {
          "EventName": {
            "anyOf": [
              { "$ref": "#/components/schemas/RoutingEventNamesEnum" },
              { "type": "null" }
            ]
          },
          "Frequency": {
            "anyOf": [
              { "$ref": "#/components/schemas/RoutingFrequencyEnum" },
              { "type": "null" }
            ]
          },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm",
            "default": false
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged",
            "default": false
          },
          "IsMobileManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismobilemanaged",
            "default": false
          },
          "ConnectorId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorid"
          },
          "ConnectorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorname"
          },
          "ConnectorType": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorTypeEnum" },
              { "type": "null" }
            ]
          },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {},
              { "type": "null" }
            ],
            "title": "Connectormeta"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "RoutingRuleId": { "type": "string", "title": "Routingruleid" }
        },
        "type": "object",
        "required": ["RoutingRuleId"],
        "title": "RoutingRuleUpdate",
        "description": "Update\n\nProperties to receive on routingrule update"
      },
      "RoutingRuleUpdate-Output": {
        "properties": {
          "EventName": {
            "anyOf": [
              { "$ref": "#/components/schemas/RoutingEventNamesEnum" },
              { "type": "null" }
            ]
          },
          "Frequency": {
            "anyOf": [
              { "$ref": "#/components/schemas/RoutingFrequencyEnum" },
              { "type": "null" }
            ]
          },
          "IsEnabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isenabled",
            "default": true
          },
          "IsFirm": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfirm",
            "default": false
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged",
            "default": false
          },
          "IsMobileManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismobilemanaged",
            "default": false
          },
          "ConnectorId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorid"
          },
          "ConnectorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorname"
          },
          "ConnectorType": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorTypeEnum" },
              { "type": "null" }
            ]
          },
          "ConnectorMeta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ConnectorMetaAgencyBloc" },
              { "$ref": "#/components/schemas/ConnectorMetaAgentCore" },
              { "$ref": "#/components/schemas/ConnectorMetaEmail" },
              { "$ref": "#/components/schemas/ConnectorMetaMedicarePro" },
              { "$ref": "#/components/schemas/ConnectorMetaMobile" },
              { "$ref": "#/components/schemas/ConnectorMetaHubspotOAuth" },
              { "$ref": "#/components/schemas/ConnectorMetaRadiusBob" },
              { "$ref": "#/components/schemas/ConnectorMetaRedtail" },
              { "$ref": "#/components/schemas/ConnectorMetaSlackOauth" },
              { "$ref": "#/components/schemas/ConnectorMetaGoogleDrive" },
              { "$ref": "#/components/schemas/ConnectorMetaSMS" },
              { "$ref": "#/components/schemas/ConnectorMetaWealthBox" },
              { "$ref": "#/components/schemas/ConnectorMetaWebhooks" },
              { "$ref": "#/components/schemas/ConnectorMetaOAuth" },
              {},
              { "type": "null" }
            ],
            "title": "Connectormeta"
          },
          "ConnectorSecureParamName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Connectorsecureparamname"
          },
          "CrmSyncMeta": {
            "anyOf": [{}, { "type": "null" }],
            "title": "Crmsyncmeta"
          },
          "RoutingRuleId": { "type": "string", "title": "Routingruleid" }
        },
        "type": "object",
        "required": ["RoutingRuleId"],
        "title": "RoutingRuleUpdate",
        "description": "Update\n\nProperties to receive on routingrule update"
      },
      "RoutingRulesPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/RoutingRule-Output" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "RoutingRulesPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "Sequence": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "SequenceItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/SequenceItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Sequenceitems"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "SequenceId": { "type": "string", "title": "Sequenceid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": ["Title", "UserId", "SequenceId", "CreatedAt"],
        "title": "Sequence",
        "description": "Sequence\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "SequenceChannelTypeEnum": {
        "type": "string",
        "enum": ["SMS", "EMAIL"],
        "title": "SequenceChannelTypeEnum",
        "description": "Channel types"
      },
      "SequenceCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "SequenceItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/SequenceItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Sequenceitems"
          }
        },
        "type": "object",
        "required": ["Title"],
        "title": "SequenceCreate",
        "description": "Create\n\nProperties to receive on automationrule creation"
      },
      "SequenceItem": {
        "properties": {
          "ItemId": { "type": "string", "title": "Itemid" },
          "SendDateDegree": { "type": "integer", "title": "Senddatedegree" },
          "SendAtTime": { "type": "string", "title": "Sendattime" },
          "ChannelType": {
            "$ref": "#/components/schemas/SequenceChannelTypeEnum"
          },
          "MessageBody": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagebody"
          },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          }
        },
        "type": "object",
        "required": ["ItemId", "SendDateDegree", "SendAtTime", "ChannelType"],
        "title": "SequenceItem",
        "description": "SequenceItem"
      },
      "SequenceUpdate-Input": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "SequenceItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/SequenceItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Sequenceitems"
          }
        },
        "type": "object",
        "title": "SequenceUpdate",
        "description": "Update\n\nProperties to receive on automationrule update"
      },
      "SequenceUpdate-Output": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "ScheduledCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Scheduledcount"
          },
          "SentCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Sentcount"
          },
          "SequenceItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/SequenceItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Sequenceitems"
          }
        },
        "type": "object",
        "title": "SequenceUpdate",
        "description": "Update\n\nProperties to receive on automationrule update"
      },
      "SequencesPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/Sequence" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "SequencesPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "ShortUrl": {
        "properties": {
          "TargetUrl": { "type": "string", "title": "Targeturl" },
          "ShortId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shortid"
          },
          "Domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domain"
          },
          "NumDaysUntilExpire": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Numdaysuntilexpire"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "ShortUrlId": { "type": "string", "title": "Shorturlid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": ["TargetUrl", "UserId", "ShortUrlId", "CreatedAt"],
        "title": "ShortUrl",
        "description": "ShortUrl\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "ShortUrlCreate": {
        "properties": {
          "TargetUrl": { "type": "string", "title": "Targeturl" },
          "ShortId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shortid"
          },
          "Domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domain"
          },
          "NumDaysUntilExpire": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Numdaysuntilexpire"
          }
        },
        "type": "object",
        "required": ["TargetUrl"],
        "title": "ShortUrlCreate",
        "description": "Create\n\nProperties to receive on shorturl creation"
      },
      "ShortUrlUpdate": {
        "properties": {
          "TargetUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Targeturl"
          },
          "ShortId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shortid"
          },
          "Domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Domain"
          },
          "NumDaysUntilExpire": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Numdaysuntilexpire"
          }
        },
        "type": "object",
        "title": "ShortUrlUpdate",
        "description": "Update\n\nProperties to receive on shorturl update"
      },
      "ShortUrlsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/ShortUrl" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ShortUrlsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "SmsTemplate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Message": { "type": "string", "title": "Message" },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "SmsTemplateId": { "type": "string", "title": "Smstemplateid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "CreatedByUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Createdbyuserid"
          },
          "CreatedByUserBrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Createdbyuserbrandimageurl"
          },
          "CreatedByUserName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Createdbyusername"
          }
        },
        "type": "object",
        "required": [
          "Title",
          "Message",
          "UserId",
          "SmsTemplateId",
          "CreatedAt"
        ],
        "title": "SmsTemplate",
        "description": "SmsTemplate\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "SmsTemplateCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Message": { "type": "string", "title": "Message" },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          }
        },
        "type": "object",
        "required": ["Title", "Message"],
        "title": "SmsTemplateCreate",
        "description": "Create\n\nProperties to receive on smstemplate creation"
      },
      "SmsTemplateUpdate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Message"
          },
          "MessageMediaItems": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MessageMediaItem" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Messagemediaitems"
          },
          "MessageMeta": {
            "anyOf": [{ "type": "object" }, { "type": "null" }],
            "title": "Messagemeta"
          },
          "IsManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanaged"
          }
        },
        "type": "object",
        "title": "SmsTemplateUpdate",
        "description": "Update\n\nProperties to receive on smstemplate update"
      },
      "SmsTemplatesPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/SmsTemplate" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "SmsTemplatesPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "StripeSubscriptionStatusEnum": {
        "type": "string",
        "enum": [
          "active",
          "past_due",
          "unpaid",
          "canceled",
          "incomplete",
          "incomplete_expired",
          "trialing"
        ],
        "title": "StripeSubscriptionStatusEnum",
        "description": "StripeSubscriptionStatusEnum\n\nStatus of the stripe subscription\nDocs: https://stripe.com/docs/api/subscriptions/object#subscription_object-status"
      },
      "SwitchWorkspaceRequest": {
        "properties": {
          "WorkspaceId": { "type": "string", "title": "Workspaceid" }
        },
        "type": "object",
        "required": ["WorkspaceId"],
        "title": "SwitchWorkspaceRequest",
        "description": "Request to switch workspace"
      },
      "TeamMember": {
        "properties": {
          "Email": { "type": "string", "title": "Email" },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "IsInvited": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isinvited"
          },
          "IsJoined": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isjoined"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "IsMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismember"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "CognitoUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cognitouserid"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "TeamMemberId": { "type": "string", "title": "Teammemberid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": ["Email", "UserId", "TeamMemberId", "CreatedAt"],
        "title": "TeamMember",
        "description": "TeamMember\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "TeamMemberCreate": {
        "properties": {
          "Email": { "type": "string", "title": "Email" },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "IsInvited": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isinvited"
          },
          "IsJoined": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isjoined"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "IsMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismember"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "CognitoUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cognitouserid"
          }
        },
        "type": "object",
        "required": ["Email"],
        "title": "TeamMemberCreate",
        "description": "Create\n\nProperties to receive on teammember creation"
      },
      "TeamMemberExtra": {
        "properties": {
          "Email": { "type": "string", "title": "Email" },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "IsInvited": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isinvited"
          },
          "IsJoined": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isjoined"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "IsMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismember"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "CognitoUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cognitouserid"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "TeamMemberId": { "type": "string", "title": "Teammemberid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "IsAdmin": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isadmin"
          }
        },
        "type": "object",
        "required": ["Email", "UserId", "TeamMemberId", "CreatedAt"],
        "title": "TeamMemberExtra",
        "description": "TeamMemberExtra\n\nTeam member for response with extra fields"
      },
      "TeamMemberUpdate": {
        "properties": {
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "IsInvited": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isinvited"
          },
          "IsJoined": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isjoined"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "IsMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismember"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "CognitoUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cognitouserid"
          }
        },
        "type": "object",
        "title": "TeamMemberUpdate",
        "description": "Update\n\nProperties to receive on teammember update"
      },
      "TeamMembersPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/TeamMemberExtra" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "TeamMembersPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "UpdateMilestones": {
        "properties": {
          "IsCompletedOnboarding": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Iscompletedonboarding",
            "default": false
          }
        },
        "type": "object",
        "title": "UpdateMilestones",
        "description": "UpdateMilestones\n\nUpdate the milestones details"
      },
      "UsageRecord": {
        "properties": {
          "SubscriptionItemId": {
            "type": "string",
            "title": "Subscriptionitemid"
          },
          "Timestamp": { "type": "integer", "title": "Timestamp" },
          "Quantity": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Quantity"
          },
          "Action": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Action",
            "default": "increment"
          }
        },
        "type": "object",
        "required": ["SubscriptionItemId", "Timestamp"],
        "title": "UsageRecord",
        "description": "UsageRecord\n\nStripes usage record object\nhttps://stripe.com/docs/api/usage_records"
      },
      "User": {
        "properties": {
          "Email": { "type": "string", "title": "Email" },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "IsInvited": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isinvited"
          },
          "IsJoined": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isjoined"
          },
          "IsActive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isactive"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "IsAdmin": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isadmin"
          },
          "IsMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismember"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "OrganizationId": { "type": "string", "title": "Organizationid" },
          "CognitoUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Cognitouserid"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "UpdatedTime": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedtime"
          },
          "CreatedTime": { "type": "string", "title": "Createdtime" }
        },
        "type": "object",
        "required": ["Email", "OrganizationId", "UserId", "CreatedTime"],
        "title": "User",
        "description": "User\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "UserAudio": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "MediaUrl": { "type": "string", "title": "Mediaurl" },
          "DurationSeconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Durationseconds"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "UserAudioId": { "type": "string", "title": "Useraudioid" },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": ["Title", "MediaUrl", "UserId", "UserAudioId", "CreatedAt"],
        "title": "UserAudio",
        "description": "UserAudio\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "UserAudioCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "MediaUrl": { "type": "string", "title": "Mediaurl" },
          "DurationSeconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Durationseconds"
          }
        },
        "type": "object",
        "required": ["Title", "MediaUrl"],
        "title": "UserAudioCreate",
        "description": "Create\n\nProperties to receive on useraudio creation"
      },
      "UserAudioPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/UserAudio" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "UserAudioPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "UserAudioUpdate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "MediaUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Mediaurl"
          },
          "DurationSeconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Durationseconds"
          }
        },
        "type": "object",
        "title": "UserAudioUpdate",
        "description": "Update\n\nProperties to receive on useraudio update"
      },
      "UserMedia": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "MediaUrl": { "type": "string", "title": "Mediaurl" },
          "MediaType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Mediatype"
          },
          "UserMediaId": { "type": "string", "title": "Usermediaid" },
          "UserId": { "type": "string", "title": "Userid" },
          "CreatedAt": { "type": "string", "title": "Createdat" }
        },
        "type": "object",
        "required": ["MediaUrl", "UserMediaId", "UserId", "CreatedAt"],
        "title": "UserMedia",
        "description": "UserMedia\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "UserMediaCreate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "MediaUrl": { "type": "string", "title": "Mediaurl" },
          "MediaType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Mediatype"
          },
          "UserMediaId": { "type": "string", "title": "Usermediaid" }
        },
        "type": "object",
        "required": ["MediaUrl", "UserMediaId"],
        "title": "UserMediaCreate",
        "description": "Create\n\nProperties to receive on usermedia creation"
      },
      "UserMediaPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/UserMedia" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "UserMediaPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "UserMediaUpdate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "MediaUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Mediaurl"
          },
          "MediaType": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Mediatype"
          }
        },
        "type": "object",
        "title": "UserMediaUpdate",
        "description": "Update\n\nProperties to receive on usermedia update"
      },
      "UserProfile": {
        "properties": {
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "IsA2PManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isa2Pmanaged"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "RegisteredNumber": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumber" },
              { "type": "null" }
            ]
          },
          "MessagingServiceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagingserviceid"
          },
          "Milestones": {
            "anyOf": [
              { "$ref": "#/components/schemas/Milestones" },
              { "type": "null" }
            ]
          },
          "UserId": { "type": "string", "title": "Userid" },
          "CreatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Createdat"
          },
          "Billing": {
            "anyOf": [
              { "$ref": "#/components/schemas/Billing" },
              { "type": "null" }
            ]
          },
          "AdminEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminemail"
          },
          "AdminFirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminfirstname"
          },
          "AdminLastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminlastname"
          },
          "AdminBrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminbrandimageurl"
          },
          "AdminImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminimageurl"
          }
        },
        "type": "object",
        "required": ["UserId"],
        "title": "UserProfile",
        "description": "UserProfile\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "UserProfileAdminPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/UserProfileInDBAdmin" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "UserProfileAdminPaginated",
        "description": "UserProfileAdminPaginated"
      },
      "UserProfileInDBAdmin": {
        "properties": {
          "LegalCompanyType": {
            "anyOf": [
              { "$ref": "#/components/schemas/CompanyTypesEnum" },
              { "type": "null" }
            ]
          },
          "LegalPublicCompanyExchange": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyexchange"
          },
          "LegalPublicCompanyTicker": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyticker"
          },
          "LegalBusinessType": {
            "anyOf": [
              { "$ref": "#/components/schemas/BusinessTypesEnum" },
              { "type": "null" }
            ]
          },
          "LegalId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalid"
          },
          "LegalCallerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcallerid"
          },
          "LegalIdType": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegistrationIdTypeEnum" },
              { "type": "null" }
            ]
          },
          "LegalBusinessWebsite": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesswebsite"
          },
          "LegalPrivacyPolicyUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalprivacypolicyurl"
          },
          "LegalSocialProfile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalsocialprofile"
          },
          "LegalName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalname"
          },
          "LegalAddress": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress"
          },
          "LegalAddress2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress2"
          },
          "LegalCity": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcity"
          },
          "LegalState": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalstate"
          },
          "LegalZip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalzip"
          },
          "LegalIsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalishighvolume"
          },
          "LegalIsConfirmSubmit": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalisconfirmsubmit"
          },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "IsA2PManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isa2Pmanaged"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "RegisteredNumber": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumber" },
              { "type": "null" }
            ]
          },
          "MessagingServiceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagingserviceid"
          },
          "Milestones": {
            "anyOf": [
              { "$ref": "#/components/schemas/MilestonesInDB" },
              { "type": "null" }
            ]
          },
          "UserId": { "type": "string", "title": "Userid" },
          "CreatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Createdat"
          },
          "Billing": {
            "anyOf": [
              { "$ref": "#/components/schemas/BillingInDB" },
              { "type": "null" }
            ]
          },
          "AdminEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminemail"
          },
          "AdminFirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminfirstname"
          },
          "AdminLastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminlastname"
          },
          "AdminBrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminbrandimageurl"
          },
          "AdminImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Adminimageurl"
          },
          "TwilioCustomerProfileSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilesid"
          },
          "TwilioCustomerProfileStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocustomerprofilestatus"
          },
          "TwilioTrustProductSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductsid"
          },
          "TwilioTrustProductStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliotrustproductstatus"
          },
          "TwilioBrandSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandsid"
          },
          "TwilioBrandStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliobrandstatus"
          },
          "TwilioAddressSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioaddresssid"
          },
          "TwilioMessageServiceSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliomessageservicesid"
          },
          "TwilioExternalCampaignId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioexternalcampaignid"
          },
          "TwilioCampaignUseCaseStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocampaignusecasestatus"
          },
          "TwilioCnamSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamsid"
          },
          "TwilioCnamStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twiliocnamstatus"
          },
          "TwilioShakenStirSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirsid"
          },
          "TwilioShakenStirStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioshakenstirstatus"
          },
          "TwilioNumberRegistrationStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilionumberregistrationstatus"
          },
          "TwilioPortInPhoneNumberSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Twilioportinphonenumbersid"
          }
        },
        "type": "object",
        "required": ["UserId"],
        "title": "UserProfileInDBAdmin",
        "description": "UserProfileInDBAdmin\n\nBase plus additional billing"
      },
      "UserProfileLegal": {
        "properties": {
          "LegalCompanyType": {
            "anyOf": [
              { "$ref": "#/components/schemas/CompanyTypesEnum" },
              { "type": "null" }
            ]
          },
          "LegalPublicCompanyExchange": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyexchange"
          },
          "LegalPublicCompanyTicker": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalpubliccompanyticker"
          },
          "LegalBusinessType": {
            "anyOf": [
              { "$ref": "#/components/schemas/BusinessTypesEnum" },
              { "type": "null" }
            ]
          },
          "LegalId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalid"
          },
          "LegalCallerId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcallerid"
          },
          "LegalIdType": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegistrationIdTypeEnum" },
              { "type": "null" }
            ]
          },
          "LegalBusinessWebsite": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalbusinesswebsite"
          },
          "LegalPrivacyPolicyUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalprivacypolicyurl"
          },
          "LegalSocialProfile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalsocialprofile"
          },
          "LegalName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalname"
          },
          "LegalAddress": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress"
          },
          "LegalAddress2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaladdress2"
          },
          "LegalCity": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalcity"
          },
          "LegalState": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalstate"
          },
          "LegalZip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legalzip"
          },
          "LegalIsHighVolume": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalishighvolume"
          },
          "LegalIsConfirmSubmit": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Legalisconfirmsubmit"
          }
        },
        "type": "object",
        "title": "UserProfileLegal",
        "description": "UserProfileLegal\n\nProperties for legal registration information"
      },
      "UserProfileMilestonesUpdate": {
        "properties": {
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "IsA2PManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isa2Pmanaged"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "RegisteredNumber": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumber" },
              { "type": "null" }
            ]
          },
          "MessagingServiceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagingserviceid"
          },
          "Milestones": { "$ref": "#/components/schemas/Milestones" }
        },
        "type": "object",
        "required": ["Milestones"],
        "title": "UserProfileMilestonesUpdate",
        "description": "Update\n\nProperties to receive on miletones update"
      },
      "UserProfileNumber": {
        "properties": { "Number": { "type": "string", "title": "Number" } },
        "type": "object",
        "required": ["Number"],
        "title": "UserProfileNumber",
        "description": "UserProfileNumber\n\nReturns users number"
      },
      "UserProfileRegisteredNumberUpdate": {
        "properties": {
          "RegisteredNumber": {
            "$ref": "#/components/schemas/RegisteredNumber"
          }
        },
        "type": "object",
        "required": ["RegisteredNumber"],
        "title": "UserProfileRegisteredNumberUpdate",
        "description": "UserProfileRegisteredNumberUpdate\n\nProperties to receive on userprofile RegisteredNumber update"
      },
      "UserProfileUpdate-Input": {
        "properties": {
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "IsA2PManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isa2Pmanaged"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "RegisteredNumber": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumber" },
              { "type": "null" }
            ]
          },
          "MessagingServiceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagingserviceid"
          },
          "Milestones": {
            "anyOf": [
              { "$ref": "#/components/schemas/Milestones" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "UserProfileUpdate",
        "description": "Update\n\nProperties to receive on userprofile update"
      },
      "UserProfileUpdate-Output": {
        "properties": {
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "IsA2PManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isa2Pmanaged"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "RegisteredNumber": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumber" },
              { "type": "null" }
            ]
          },
          "MessagingServiceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagingserviceid"
          },
          "Milestones": {
            "anyOf": [
              { "$ref": "#/components/schemas/Milestones" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "UserProfileUpdate",
        "description": "Update\n\nProperties to receive on userprofile update"
      },
      "UserSignupCreate": {
        "properties": {
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Organizationid"
          },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": { "type": "string", "title": "Email" },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "CreatedUserId": { "type": "string", "title": "Createduserid" }
        },
        "type": "object",
        "required": ["FirstName", "LastName", "Email", "CreatedUserId"],
        "title": "UserSignupCreate",
        "description": "UserSignup\n\nProperties to receive on user signup"
      },
      "VCard": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Kind": { "$ref": "#/components/schemas/VCardKindEnum" },
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phones": {
            "items": { "$ref": "#/components/schemas/VCardPhone" },
            "type": "array",
            "title": "Phones"
          },
          "ImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Imageurl"
          },
          "Emails": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardEmail" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Emails"
          },
          "Addresses": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardAddress" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Addresses"
          },
          "Nickname": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Nickname"
          },
          "Org": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Org"
          },
          "Note": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Note"
          },
          "WebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Websiteurl"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          },
          "CreatedAt": { "type": "string", "title": "Createdat" },
          "VCardId": { "type": "string", "title": "Vcardid" },
          "VCardUrl": { "type": "string", "title": "Vcardurl" }
        },
        "type": "object",
        "required": [
          "Title",
          "Kind",
          "FirstName",
          "LastName",
          "Phones",
          "UserId",
          "CreatedAt",
          "VCardId",
          "VCardUrl"
        ],
        "title": "VCard",
        "description": "VCard\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "VCardAddress": {
        "properties": {
          "CreatedTime": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Createdtime"
          },
          "Pref": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Pref"
          },
          "Type": {
            "anyOf": [
              { "$ref": "#/components/schemas/VCardAddressTypeEnum" },
              { "type": "null" }
            ]
          },
          "Address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          }
        },
        "type": "object",
        "title": "VCardAddress",
        "description": "VAddress entry"
      },
      "VCardAddressTypeEnum": {
        "type": "string",
        "enum": ["home", "work"],
        "title": "VCardAddressTypeEnum",
        "description": "Address type\n\nhttps://www.rfc-editor.org/rfc/rfc6350#section-5.6"
      },
      "VCardCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Kind": { "$ref": "#/components/schemas/VCardKindEnum" },
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "Phones": {
            "items": { "$ref": "#/components/schemas/VCardPhone" },
            "type": "array",
            "title": "Phones"
          },
          "ImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Imageurl"
          },
          "Emails": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardEmail" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Emails"
          },
          "Addresses": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardAddress" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Addresses"
          },
          "Nickname": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Nickname"
          },
          "Org": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Org"
          },
          "Note": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Note"
          },
          "WebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Websiteurl"
          }
        },
        "type": "object",
        "required": ["Title", "Kind", "FirstName", "LastName", "Phones"],
        "title": "VCardCreate",
        "description": "Create\n\nProperties to receive on vcard creation"
      },
      "VCardEmail": {
        "properties": {
          "CreatedTime": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Createdtime"
          },
          "Pref": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Pref"
          },
          "Type": {
            "anyOf": [
              { "$ref": "#/components/schemas/VCardEmailTypeEnum" },
              { "type": "null" }
            ],
            "default": "home"
          },
          "Email": { "type": "string", "title": "Email" }
        },
        "type": "object",
        "required": ["Email"],
        "title": "VCardEmail",
        "description": "VEmail entry"
      },
      "VCardEmailTypeEnum": {
        "type": "string",
        "enum": ["home", "work"],
        "title": "VCardEmailTypeEnum",
        "description": "Email type\n\nhttps://www.rfc-editor.org/rfc/rfc6350#section-5.6"
      },
      "VCardKindEnum": {
        "type": "string",
        "enum": ["individual", "org"],
        "title": "VCardKindEnum",
        "description": "Kind property\n\nhttps://www.rfc-editor.org/rfc/rfc6350#section-6.1.4"
      },
      "VCardPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/VCard" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "VCardPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "VCardPhone": {
        "properties": {
          "CreatedTime": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Createdtime"
          },
          "Pref": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Pref"
          },
          "Type": {
            "anyOf": [
              { "$ref": "#/components/schemas/VCardPhoneTypeEnum" },
              { "type": "null" }
            ],
            "default": "voice"
          },
          "Number": { "type": "string", "title": "Number" }
        },
        "type": "object",
        "required": ["Number"],
        "title": "VCardPhone",
        "description": "VPhone entry\n\nhttps://www.rfc-editor.org/rfc/rfc6350#section-6.4.1"
      },
      "VCardPhoneTypeEnum": {
        "type": "string",
        "enum": [
          "text",
          "voice",
          "work",
          "fax",
          "cell",
          "video",
          "pager",
          "textphone"
        ],
        "title": "VCardPhoneTypeEnum",
        "description": "Phone type\n\nhttps://www.rfc-editor.org/rfc/rfc6350#section-6.4.1"
      },
      "VCardUpdate-Input": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Kind": {
            "anyOf": [
              { "$ref": "#/components/schemas/VCardKindEnum" },
              { "type": "null" }
            ]
          },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phones": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardPhone" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Phones"
          },
          "ImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Imageurl"
          },
          "Emails": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardEmail" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Emails"
          },
          "Addresses": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardAddress" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Addresses"
          },
          "Nickname": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Nickname"
          },
          "Org": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Org"
          },
          "Note": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Note"
          },
          "WebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Websiteurl"
          },
          "VCardUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Vcardurl"
          }
        },
        "type": "object",
        "title": "VCardUpdate",
        "description": "Update\n\nProperties to receive on vcard update"
      },
      "VCardUpdate-Output": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Kind": {
            "anyOf": [
              { "$ref": "#/components/schemas/VCardKindEnum" },
              { "type": "null" }
            ]
          },
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "Phones": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardPhone" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Phones"
          },
          "ImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Imageurl"
          },
          "Emails": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardEmail" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Emails"
          },
          "Addresses": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/VCardAddress" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Addresses"
          },
          "Nickname": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Nickname"
          },
          "Org": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Org"
          },
          "Note": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Note"
          },
          "WebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Websiteurl"
          },
          "VCardUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Vcardurl"
          }
        },
        "type": "object",
        "title": "VCardUpdate",
        "description": "Update\n\nProperties to receive on vcard update"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "Video": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "Source": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Source"
          },
          "SourceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceid"
          },
          "SourceUploadFilename": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceuploadfilename"
          },
          "SourceLoomVideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceloomvideoid"
          },
          "SourceLoomVideoSigningId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceloomvideosigningid"
          },
          "SourceJumpShareVideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcejumpsharevideoid"
          },
          "SourceJumpShareThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcejumpsharethumbnailurl"
          },
          "SourceUploadVideoUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceuploadvideourl"
          },
          "SourceEmbedHtml": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceembedhtml"
          },
          "ShortUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shorturl"
          },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "BrowserPageTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserpagetitle"
          },
          "BrowserFaviconUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserfaviconurl"
          },
          "MetaTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metatitle"
          },
          "MetaDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metadescription"
          },
          "DisplayTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaytitle"
          },
          "DisplayDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaydescription"
          },
          "DisplayBrandSize": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandsize"
          },
          "DisplayAuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorname"
          },
          "DisplayAuthorTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthortitle"
          },
          "DisplayAuthorUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorurl"
          },
          "DisplayAuthorPhone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorphone"
          },
          "DisplayAuthorEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthoremail"
          },
          "IsDisplayPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplayprimaryaction"
          },
          "DisplayPrimaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactiontext"
          },
          "DisplayPrimaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactionlink"
          },
          "IsDisplaySecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplaysecondaryaction"
          },
          "DisplaySecondaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactiontext"
          },
          "DisplaySecondaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactionlink"
          },
          "ViewCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Viewcount"
          },
          "ClickedPrimaryActionCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Clickedprimaryactioncount"
          },
          "ClickedSecondaryActionCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Clickedsecondaryactioncount"
          },
          "Duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Duration"
          },
          "IsPublic": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispublic"
          },
          "Meta": { "anyOf": [{}, { "type": "null" }], "title": "Meta" },
          "UserId": { "type": "string", "title": "Userid" },
          "VideoId": { "type": "string", "title": "Videoid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["Title", "UserId", "VideoId", "CreatedTime"],
        "title": "Video",
        "description": "Video\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "VideoCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "Source": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Source"
          },
          "SourceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceid"
          },
          "SourceUploadFilename": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceuploadfilename"
          },
          "SourceLoomVideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceloomvideoid"
          },
          "SourceLoomVideoSigningId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceloomvideosigningid"
          },
          "SourceJumpShareVideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcejumpsharevideoid"
          },
          "SourceJumpShareThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcejumpsharethumbnailurl"
          },
          "SourceUploadVideoUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceuploadvideourl"
          },
          "SourceEmbedHtml": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceembedhtml"
          },
          "ShortUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shorturl"
          },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "BrowserPageTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserpagetitle"
          },
          "BrowserFaviconUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserfaviconurl"
          },
          "MetaTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metatitle"
          },
          "MetaDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metadescription"
          },
          "DisplayTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaytitle"
          },
          "DisplayDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaydescription"
          },
          "DisplayBrandSize": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandsize"
          },
          "DisplayAuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorname"
          },
          "DisplayAuthorTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthortitle"
          },
          "DisplayAuthorUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorurl"
          },
          "DisplayAuthorPhone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorphone"
          },
          "DisplayAuthorEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthoremail"
          },
          "IsDisplayPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplayprimaryaction"
          },
          "DisplayPrimaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactiontext"
          },
          "DisplayPrimaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactionlink"
          },
          "IsDisplaySecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplaysecondaryaction"
          },
          "DisplaySecondaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactiontext"
          },
          "DisplaySecondaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactionlink"
          },
          "ViewCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Viewcount"
          },
          "ClickedPrimaryActionCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Clickedprimaryactioncount"
          },
          "ClickedSecondaryActionCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Clickedsecondaryactioncount"
          },
          "Duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Duration"
          },
          "IsPublic": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispublic"
          },
          "Meta": { "anyOf": [{}, { "type": "null" }], "title": "Meta" }
        },
        "type": "object",
        "required": ["Title"],
        "title": "VideoCreate",
        "description": "Create\n\nProperties to receive on video creation"
      },
      "VideoTutorial": {
        "properties": {
          "VideoId": { "type": "string", "title": "Videoid" },
          "Title": { "type": "string", "title": "Title" },
          "ThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Thumbnailurl"
          },
          "Tags": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Tags"
          },
          "Time": { "type": "string", "title": "Time" }
        },
        "type": "object",
        "required": ["VideoId", "Title", "Tags", "Time"],
        "title": "VideoTutorial",
        "description": "VideoTutorial\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "VideoTutorialsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/VideoTutorial" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "VideoTutorialsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "VideoUpdate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "Description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "Source": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Source"
          },
          "SourceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceid"
          },
          "SourceUploadFilename": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceuploadfilename"
          },
          "SourceLoomVideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceloomvideoid"
          },
          "SourceLoomVideoSigningId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceloomvideosigningid"
          },
          "SourceJumpShareVideoId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcejumpsharevideoid"
          },
          "SourceJumpShareThumbnailUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourcejumpsharethumbnailurl"
          },
          "SourceUploadVideoUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceuploadvideourl"
          },
          "SourceEmbedHtml": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceembedhtml"
          },
          "ShortUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shorturl"
          },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "BrowserPageTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserpagetitle"
          },
          "BrowserFaviconUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Browserfaviconurl"
          },
          "MetaTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metatitle"
          },
          "MetaDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Metadescription"
          },
          "DisplayTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaytitle"
          },
          "DisplayDescription": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaydescription"
          },
          "DisplayBrandSize": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaybrandsize"
          },
          "DisplayAuthorName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorname"
          },
          "DisplayAuthorTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthortitle"
          },
          "DisplayAuthorUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorurl"
          },
          "DisplayAuthorPhone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthorphone"
          },
          "DisplayAuthorEmail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayauthoremail"
          },
          "IsDisplayPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplayprimaryaction"
          },
          "DisplayPrimaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactiontext"
          },
          "DisplayPrimaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displayprimaryactionlink"
          },
          "IsDisplaySecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdisplaysecondaryaction"
          },
          "DisplaySecondaryActionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactiontext"
          },
          "DisplaySecondaryActionLink": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Displaysecondaryactionlink"
          },
          "ViewCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Viewcount"
          },
          "ClickedPrimaryActionCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Clickedprimaryactioncount"
          },
          "ClickedSecondaryActionCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Clickedsecondaryactioncount"
          },
          "Duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Duration"
          },
          "IsPublic": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ispublic"
          },
          "Meta": { "anyOf": [{}, { "type": "null" }], "title": "Meta" }
        },
        "type": "object",
        "title": "VideoUpdate",
        "description": "Update\n\nProperties to receive on video update"
      },
      "VideoView": {
        "properties": {
          "VideoId": { "type": "string", "title": "Videoid" },
          "AnonymousId": { "type": "string", "title": "Anonymousid" },
          "ContactId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactid"
          },
          "ContactName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactname"
          },
          "VideoTitle": { "type": "string", "title": "Videotitle" },
          "IsClickedPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isclickedprimaryaction"
          },
          "IsClickedSecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isclickedsecondaryaction"
          },
          "ViewCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Viewcount"
          },
          "Meta": { "anyOf": [{}, { "type": "null" }], "title": "Meta" },
          "UserId": { "type": "string", "title": "Userid" },
          "VideoViewId": { "type": "string", "title": "Videoviewid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "VideoId",
          "AnonymousId",
          "VideoTitle",
          "UserId",
          "VideoViewId",
          "CreatedTime"
        ],
        "title": "VideoView",
        "description": "VideoView\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "VideoViewCreate": {
        "properties": {
          "VideoId": { "type": "string", "title": "Videoid" },
          "AnonymousId": { "type": "string", "title": "Anonymousid" },
          "ContactId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactid"
          },
          "ContactName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contactname"
          },
          "VideoTitle": { "type": "string", "title": "Videotitle" },
          "IsClickedPrimaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isclickedprimaryaction"
          },
          "IsClickedSecondaryAction": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isclickedsecondaryaction"
          },
          "ViewCount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Viewcount"
          },
          "Meta": { "anyOf": [{}, { "type": "null" }], "title": "Meta" }
        },
        "type": "object",
        "required": ["VideoId", "AnonymousId", "VideoTitle"],
        "title": "VideoViewCreate",
        "description": "Create\n\nProperties to receive on videoview creation"
      },
      "VideoViewsPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/VideoView" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "VideoViewsPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "VideosPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/Video" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "VideosPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "Voice": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "AudioUrl": { "type": "string", "title": "Audiourl" },
          "ShortUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shorturl"
          },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "TranscriptionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptiontext"
          },
          "TranscriptionStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptionstatus"
          },
          "IsEvergreen": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isevergreen",
            "default": false
          },
          "SenderMemberId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sendermemberid"
          },
          "UserId": { "type": "string", "title": "Userid" },
          "VoiceId": { "type": "string", "title": "Voiceid" },
          "CreatedTime": { "type": "integer", "title": "Createdtime" },
          "UpdatedAt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": ["Title", "AudioUrl", "UserId", "VoiceId", "CreatedTime"],
        "title": "Voice",
        "description": "Voice\n\nThe model to be used for responses. Doesnt include internal PK and SK"
      },
      "VoiceCreate": {
        "properties": {
          "Title": { "type": "string", "title": "Title" },
          "AudioUrl": { "type": "string", "title": "Audiourl" },
          "ShortUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shorturl"
          },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "TranscriptionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptiontext"
          },
          "TranscriptionStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptionstatus"
          },
          "IsEvergreen": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isevergreen",
            "default": false
          },
          "SenderMemberId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sendermemberid"
          }
        },
        "type": "object",
        "required": ["Title", "AudioUrl"],
        "title": "VoiceCreate",
        "description": "Create\n\nProperties to receive on voice creation"
      },
      "VoiceUpdate": {
        "properties": {
          "Title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "AudioUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audiourl"
          },
          "ShortUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Shorturl"
          },
          "BrandUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandurl"
          },
          "TranscriptionText": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptiontext"
          },
          "TranscriptionStatus": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transcriptionstatus"
          },
          "IsEvergreen": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isevergreen",
            "default": false
          },
          "SenderMemberId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sendermemberid"
          }
        },
        "type": "object",
        "title": "VoiceUpdate",
        "description": "Update\n\nProperties to receive on voice update"
      },
      "VoicesPaginated": {
        "properties": {
          "meta": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResponseMetaBase" },
              { "type": "null" }
            ]
          },
          "records": {
            "items": { "$ref": "#/components/schemas/Voice" },
            "type": "array",
            "title": "Records"
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "VoicesPaginated",
        "description": "Pagination\n\nReturns pages of records and meta data about pagination"
      },
      "WhaleUserCallForwarding": {
        "properties": { "Number": { "type": "string", "title": "Number" } },
        "type": "object",
        "required": ["Number"],
        "title": "WhaleUserCallForwarding",
        "description": "WhaleUserCallForwarding\n\nProvide a phone to set as the call forwarding number"
      },
      "WhaleUserComplianceMessage": {
        "properties": { "Message": { "type": "string", "title": "Message" } },
        "type": "object",
        "required": ["Message"],
        "title": "WhaleUserComplianceMessage",
        "description": "WhaleUserComplianceMessage\n\nProvide a comppliance message to set as the compliance message"
      },
      "WhaleUserSetupArchiver": {
        "properties": {
          "ConnectorName": { "type": "string", "title": "Connectorname" },
          "ConnectorType": { "$ref": "#/components/schemas/ConnectorTypeEnum" },
          "ConnectorEmail": { "type": "string", "title": "Connectoremail" }
        },
        "type": "object",
        "required": ["ConnectorName", "ConnectorType", "ConnectorEmail"],
        "title": "WhaleUserSetupArchiver",
        "description": "WhaleUserSetupArchiver"
      },
      "WhaleUserSignupCreate": {
        "properties": {
          "FirstName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Firstname"
          },
          "LastName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Lastname"
          },
          "CompanyName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companyname"
          },
          "JobTitle": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Jobtitle"
          },
          "OrganizationId": { "type": "string", "title": "Organizationid" },
          "Industry": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Industry"
          },
          "Crm": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crm"
          },
          "SourceAttribution": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sourceattribution"
          },
          "Address1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address1"
          },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "Phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "Email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "IsAllowAiContactCreate": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isallowaicontactcreate"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "IsFree": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isfree"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          },
          "IsDeleteRequested": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isdeleterequested"
          },
          "IsTeamMember": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isteammember",
            "default": false
          },
          "TeamMemberUserId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Teammemberuserid"
          },
          "IsGovernor": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isgovernor",
            "default": false
          },
          "IsUser": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isuser",
            "default": false
          },
          "WorkspaceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspaceid"
          },
          "WorkspaceName": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Workspacename"
          },
          "BrandImageUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Brandimageurl"
          },
          "IsA2PManaged": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Isa2Pmanaged"
          },
          "IsLegalSubmitted": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalsubmitted"
          },
          "IsLegalProcessing": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalprocessing"
          },
          "IsLegalRegistered": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Islegalregistered"
          },
          "RegisteredNumber": {
            "anyOf": [
              { "$ref": "#/components/schemas/RegisteredNumber" },
              { "type": "null" }
            ]
          },
          "MessagingServiceId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Messagingserviceid"
          },
          "Milestones": {
            "anyOf": [
              { "$ref": "#/components/schemas/Milestones" },
              { "type": "null" }
            ]
          },
          "CreatedUserId": { "type": "string", "title": "Createduserid" }
        },
        "type": "object",
        "required": ["OrganizationId", "CreatedUserId"],
        "title": "WhaleUserSignupCreate",
        "description": "WhaleUserSignupCreate\n\nUsed to signup a user by admin whale script"
      },
      "WhaleUserSignupPhone": {
        "properties": {
          "Phone": { "type": "string", "title": "Phone" },
          "IsVoiceEnabled": { "type": "boolean", "title": "Isvoiceenabled" },
          "PhoneSid": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phonesid"
          }
        },
        "type": "object",
        "required": ["Phone", "IsVoiceEnabled"],
        "title": "WhaleUserSignupPhone",
        "description": "WhaleUserSignupPhone\n\nProvide a phone to stub out for the user\n\nSupply PhoneSid to lookup in twilio"
      },
      "WorkspaceBillingUpdate": {
        "properties": {
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          }
        },
        "type": "object",
        "title": "WorkspaceBillingUpdate",
        "description": "Request to update workspace billing"
      },
      "WorkspaceCreateIn": {
        "properties": {
          "WorkspaceName": { "type": "string", "title": "Workspacename" },
          "Email": { "type": "string", "title": "Email" },
          "FirstName": { "type": "string", "title": "Firstname" },
          "LastName": { "type": "string", "title": "Lastname" },
          "CompanyName": { "type": "string", "title": "Companyname" },
          "Address1": { "type": "string", "title": "Address1" },
          "Address2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address2"
          },
          "City": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "City"
          },
          "State": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "State"
          },
          "Zip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Zip"
          },
          "LegalDisclosure": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Legaldisclosure"
          },
          "CompanyWebsiteUrl": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Companywebsiteurl"
          },
          "IsManagedBilling": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Ismanagedbilling"
          },
          "PlanProductId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Planproductid"
          },
          "AddOnProductIds": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Addonproductids"
          }
        },
        "type": "object",
        "required": [
          "WorkspaceName",
          "Email",
          "FirstName",
          "LastName",
          "CompanyName"
        ],
        "title": "WorkspaceCreateIn",
        "description": "Request to create workspace"
      }
    },
    "securitySchemes": { "JWTBearer": { "type": "http", "scheme": "bearer" } }
  },
  "tags": [{ "name": "profiles" }]
}
